/* Generated by rollup. Don't edit it. */
// @ts-nocheck
import * as jspb from '@tronweb3/google-protobuf';
import jspb__default from '@tronweb3/google-protobuf';
function _mergeNamespaces(n, m) {
  m.forEach(function (e) {
    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
      if (k !== 'default' && !(k in n)) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  });
  return Object.freeze(n);
}
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}
var any_pb$1 = {};
(function (exports) {
  // source: google/protobuf/any.proto
  /**
   * @fileoverview
   * @enhanceable
   * @suppress {missingRequire} reports error on implicit type usages.
   * @suppress {messageConventions} JS Compiler reports an error if a variable or
   *     field starts with 'MSG_' and isn't a translatable message.
   * @public
   */
  // GENERATED CODE -- DO NOT EDIT!
  /* eslint-disable */
  // @ts-nocheck

  var jspb = jspb__default;
  var goog = jspb;
  var global = typeof globalThis !== 'undefined' && globalThis || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || typeof self !== 'undefined' && self || function () {
    return this;
  }.call(null) || Function('return this')();
  goog.exportSymbol('proto.google.protobuf.Any', null, global);
  /**
   * Generated by JsPbCodeGenerator.
   * @param {Array=} opt_data Optional initial data array, typically from a
   * server response, or constructed directly in Javascript. The array is used
   * in place and becomes part of the constructed object. It is not cloned.
   * If no data is provided, the constructed object will be empty, but still
   * valid.
   * @extends {jspb.Message}
   * @constructor
   */
  proto.google.protobuf.Any = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
  };
  goog.inherits(proto.google.protobuf.Any, jspb.Message);
  if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.google.protobuf.Any.displayName = 'proto.google.protobuf.Any';
  }
  if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.google.protobuf.Any.prototype.toObject = function (opt_includeInstance) {
      return proto.google.protobuf.Any.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.google.protobuf.Any} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.google.protobuf.Any.toObject = function (includeInstance, msg) {
      var obj = {
        typeUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
        value: msg.getValue_asB64()
      };
      if (includeInstance) {
        obj.$jspbMessageInstance = msg;
      }
      return obj;
    };
  }

  /**
   * Deserializes binary data (in protobuf wire format).
   * @param {jspb.ByteSource} bytes The bytes to deserialize.
   * @return {!proto.google.protobuf.Any}
   */
  proto.google.protobuf.Any.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.google.protobuf.Any();
    return proto.google.protobuf.Any.deserializeBinaryFromReader(msg, reader);
  };

  /**
   * Deserializes binary data (in protobuf wire format) from the
   * given reader into the given message object.
   * @param {!proto.google.protobuf.Any} msg The message object to deserialize into.
   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
   * @return {!proto.google.protobuf.Any}
   */
  proto.google.protobuf.Any.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */reader.readString();
          msg.setTypeUrl(value);
          break;
        case 2:
          var value = /** @type {!Uint8Array} */reader.readBytes();
          msg.setValue(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

  /**
   * Serializes the message to binary data (in protobuf wire format).
   * @return {!Uint8Array}
   */
  proto.google.protobuf.Any.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.google.protobuf.Any.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
  };

  /**
   * Serializes the given message to binary data (in protobuf wire
   * format), writing to the given BinaryWriter.
   * @param {!proto.google.protobuf.Any} message
   * @param {!jspb.BinaryWriter} writer
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.google.protobuf.Any.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTypeUrl();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getValue_asU8();
    if (f.length > 0) {
      writer.writeBytes(2, f);
    }
  };

  /**
   * optional string type_url = 1;
   * @return {string}
   */
  proto.google.protobuf.Any.prototype.getTypeUrl = function () {
    return /** @type {string} */jspb.Message.getFieldWithDefault(this, 1, "");
  };

  /**
   * @param {string} value
   * @return {!proto.google.protobuf.Any} returns this
   */
  proto.google.protobuf.Any.prototype.setTypeUrl = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
  };

  /**
   * optional bytes value = 2;
   * @return {!(string|Uint8Array)}
   */
  proto.google.protobuf.Any.prototype.getValue = function () {
    return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
  };

  /**
   * optional bytes value = 2;
   * This is a type-conversion wrapper around `getValue()`
   * @return {string}
   */
  proto.google.protobuf.Any.prototype.getValue_asB64 = function () {
    return /** @type {string} */jspb.Message.bytesAsB64(this.getValue());
  };

  /**
   * optional bytes value = 2;
   * Note that Uint8Array is not supported on all browsers.
   * @see http://caniuse.com/Uint8Array
   * This is a type-conversion wrapper around `getValue()`
   * @return {!Uint8Array}
   */
  proto.google.protobuf.Any.prototype.getValue_asU8 = function () {
    return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getValue());
  };

  /**
   * @param {!(string|Uint8Array)} value
   * @return {!proto.google.protobuf.Any} returns this
   */
  proto.google.protobuf.Any.prototype.setValue = function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
  };
  goog.object.extend(exports, proto.google.protobuf);
  /* This code will be inserted into generated code for
   * google/protobuf/any.proto. */

  /**
   * Returns the type name contained in this instance, if any.
   * @return {string|undefined}
   */
  proto.google.protobuf.Any.prototype.getTypeName = function () {
    return this.getTypeUrl().split('/').pop();
  };

  /**
   * Packs the given message instance into this Any.
   * For binary format usage only.
   * @param {!Uint8Array} serialized The serialized data to pack.
   * @param {string} name The type name of this message object.
   * @param {string=} opt_typeUrlPrefix the type URL prefix.
   */
  proto.google.protobuf.Any.prototype.pack = function (serialized, name, opt_typeUrlPrefix) {
    if (!opt_typeUrlPrefix) {
      opt_typeUrlPrefix = 'type.googleapis.com/';
    }
    if (opt_typeUrlPrefix.substr(-1) != '/') {
      this.setTypeUrl(opt_typeUrlPrefix + '/' + name);
    } else {
      this.setTypeUrl(opt_typeUrlPrefix + name);
    }
    this.setValue(serialized);
  };

  /**
   * @template T
   * Unpacks this Any into the given message object.
   * @param {function(Uint8Array):T} deserialize Function that will deserialize
   *     the binary data properly.
   * @param {string} name The expected type name of this message object.
   * @return {?T} If the name matched the expected name, returns the deserialized
   *     object, otherwise returns null.
   */
  proto.google.protobuf.Any.prototype.unpack = function (deserialize, name) {
    if (this.getTypeName() == name) {
      return deserialize(this.getValue_asU8());
    } else {
      return null;
    }
  };
})(any_pb$1);
var any_pb = /*@__PURE__*/getDefaultExportFromCjs(any_pb$1);
var google_protobuf_any_pb = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  default: any_pb
}, [any_pb$1]);

// source: core/Tron.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var goog = jspb;
var global = function () {
  return this || window || global || self || Function('return this')();
}.call(null);
goog.object.extend(proto, google_protobuf_any_pb);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const AccountId = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(AccountId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  AccountId.displayName = 'AccountId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Vote = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Vote.displayName = 'Vote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Proposal = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, Proposal.repeatedFields_, null);
};
goog.inherits(Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Proposal.displayName = 'Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Exchange = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(Exchange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Exchange.displayName = 'Exchange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Account = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, Account.repeatedFields_, null);
};
goog.inherits(Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Account.displayName = 'Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
Account.Frozen = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(Account.Frozen, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Account.Frozen.displayName = 'Account.Frozen';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
Account.AccountResource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(Account.AccountResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Account.AccountResource.displayName = 'Account.AccountResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Key = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Key.displayName = 'Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const DelegatedResource = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(DelegatedResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  DelegatedResource.displayName = 'DelegatedResource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const authority = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(authority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  authority.displayName = 'authority';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Permission = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, Permission.repeatedFields_, null);
};
goog.inherits(Permission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Permission.displayName = 'Permission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Witness = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(Witness, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Witness.displayName = 'Witness';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Votes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, Votes.repeatedFields_, null);
};
goog.inherits(Votes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Votes.displayName = 'Votes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const MarketOrderDetail = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(MarketOrderDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  MarketOrderDetail.displayName = 'MarketOrderDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const Transaction = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, Transaction.repeatedFields_, null);
};
goog.inherits(Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Transaction.displayName = 'Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
Transaction.Contract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(Transaction.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Transaction.Contract.displayName = 'Transaction.Contract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
Transaction.Result = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, Transaction.Result.repeatedFields_, null);
};
goog.inherits(Transaction.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Transaction.Result.displayName = 'Transaction.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
Transaction.raw = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, Transaction.raw.repeatedFields_, null);
};
goog.inherits(Transaction.raw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  Transaction.raw.displayName = 'Transaction.raw';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  AccountId.prototype.toObject = function (opt_includeInstance) {
    return AccountId.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!AccountId} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  AccountId.toObject = function (includeInstance, msg) {
    var obj = {
      name: msg.getName_asB64(),
      address: msg.getAddress_asB64()
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!AccountId}
 */
AccountId.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new AccountId();
  return AccountId.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!AccountId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!AccountId}
 */
AccountId.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
AccountId.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  AccountId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!AccountId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
AccountId.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional bytes name = 1;
 * @return {!(string|Uint8Array)}
 */
AccountId.prototype.getName = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes name = 1;
 * This is a type-conversion wrapper around `getName()`
 * @return {string}
 */
AccountId.prototype.getName_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getName());
};

/**
 * optional bytes name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getName()`
 * @return {!Uint8Array}
 */
AccountId.prototype.getName_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getName());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!AccountId} returns this
 */
AccountId.prototype.setName = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes address = 2;
 * @return {!(string|Uint8Array)}
 */
AccountId.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
AccountId.prototype.getAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAddress());
};

/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
AccountId.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!AccountId} returns this
 */
AccountId.prototype.setAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Vote.prototype.toObject = function (opt_includeInstance) {
    return Vote.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Vote} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Vote.toObject = function (includeInstance, msg) {
    var obj = {
      voteAddress: msg.getVoteAddress_asB64(),
      voteCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Vote}
 */
Vote.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Vote();
  return Vote.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Vote}
 */
Vote.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setVoteAddress(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readInt64();
        msg.setVoteCount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Vote.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Vote.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVoteAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getVoteCount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * optional bytes vote_address = 1;
 * @return {!(string|Uint8Array)}
 */
Vote.prototype.getVoteAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes vote_address = 1;
 * This is a type-conversion wrapper around `getVoteAddress()`
 * @return {string}
 */
Vote.prototype.getVoteAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getVoteAddress());
};

/**
 * optional bytes vote_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVoteAddress()`
 * @return {!Uint8Array}
 */
Vote.prototype.getVoteAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getVoteAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Vote} returns this
 */
Vote.prototype.setVoteAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional int64 vote_count = 2;
 * @return {number}
 */
Vote.prototype.getVoteCount = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!Vote} returns this
 */
Vote.prototype.setVoteCount = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
Proposal.repeatedFields_ = [6];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Proposal.prototype.toObject = function (opt_includeInstance) {
    return Proposal.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Proposal} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Proposal.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        proposalId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        proposerAddress: msg.getProposerAddress_asB64(),
        parametersMap: (f = msg.getParametersMap()) ? f.toObject(includeInstance, undefined) : [],
        expirationTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
        createTime: jspb.Message.getFieldWithDefault(msg, 5, 0),
        approvalsList: msg.getApprovalsList_asB64(),
        state: jspb.Message.getFieldWithDefault(msg, 7, 0)
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Proposal}
 */
Proposal.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Proposal();
  return Proposal.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Proposal}
 */
Proposal.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt64();
        msg.setProposalId(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setProposerAddress(value);
        break;
      case 3:
        var value = msg.getParametersMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
        });
        break;
      case 4:
        var value = /** @type {number} */reader.readInt64();
        msg.setExpirationTime(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt64();
        msg.setCreateTime(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.addApprovals(value);
        break;
      case 7:
        var value = /** @type {!Proposal.State} */reader.readEnum();
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Proposal.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Proposal.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getProposalId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getProposerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getExpirationTime();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getApprovalsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(6, f);
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(7, f);
  }
};

/**
 * @enum {number}
 */
Proposal.State = {
  PENDING: 0,
  DISAPPROVED: 1,
  APPROVED: 2,
  CANCELED: 3
};

/**
 * optional int64 proposal_id = 1;
 * @return {number}
 */
Proposal.prototype.getProposalId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {number} value
 * @return {!Proposal} returns this
 */
Proposal.prototype.setProposalId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes proposer_address = 2;
 * @return {!(string|Uint8Array)}
 */
Proposal.prototype.getProposerAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes proposer_address = 2;
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {string}
 */
Proposal.prototype.getProposerAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getProposerAddress());
};

/**
 * optional bytes proposer_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {!Uint8Array}
 */
Proposal.prototype.getProposerAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getProposerAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Proposal} returns this
 */
Proposal.prototype.setProposerAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * map<int64, int64> parameters = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
Proposal.prototype.getParametersMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */(
    jspb.Message.getMapField(this, 3, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!Proposal} returns this
 */
Proposal.prototype.clearParametersMap = function () {
  this.getParametersMap().clear();
  return this;
};

/**
 * optional int64 expiration_time = 4;
 * @return {number}
 */
Proposal.prototype.getExpirationTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!Proposal} returns this
 */
Proposal.prototype.setExpirationTime = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int64 create_time = 5;
 * @return {number}
 */
Proposal.prototype.getCreateTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!Proposal} returns this
 */
Proposal.prototype.setCreateTime = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * repeated bytes approvals = 6;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
Proposal.prototype.getApprovalsList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */jspb.Message.getRepeatedField(this, 6);
};

/**
 * repeated bytes approvals = 6;
 * This is a type-conversion wrapper around `getApprovalsList()`
 * @return {!Array<string>}
 */
Proposal.prototype.getApprovalsList_asB64 = function () {
  return /** @type {!Array<string>} */jspb.Message.bytesListAsB64(this.getApprovalsList());
};

/**
 * repeated bytes approvals = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getApprovalsList()`
 * @return {!Array<!Uint8Array>}
 */
Proposal.prototype.getApprovalsList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */jspb.Message.bytesListAsU8(this.getApprovalsList());
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!Proposal} returns this
 */
Proposal.prototype.setApprovalsList = function (value) {
  return jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!Proposal} returns this
 */
Proposal.prototype.addApprovals = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Proposal} returns this
 */
Proposal.prototype.clearApprovalsList = function () {
  return this.setApprovalsList([]);
};

/**
 * optional State state = 7;
 * @return {!Proposal.State}
 */
Proposal.prototype.getState = function () {
  return /** @type {!Proposal.State} */jspb.Message.getFieldWithDefault(this, 7, 0);
};

/**
 * @param {!Proposal.State} value
 * @return {!Proposal} returns this
 */
Proposal.prototype.setState = function (value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Exchange.prototype.toObject = function (opt_includeInstance) {
    return Exchange.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Exchange} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Exchange.toObject = function (includeInstance, msg) {
    var obj = {
      exchangeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
      creatorAddress: msg.getCreatorAddress_asB64(),
      createTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
      firstTokenId: msg.getFirstTokenId_asB64(),
      firstTokenBalance: jspb.Message.getFieldWithDefault(msg, 7, 0),
      secondTokenId: msg.getSecondTokenId_asB64(),
      secondTokenBalance: jspb.Message.getFieldWithDefault(msg, 9, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Exchange}
 */
Exchange.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Exchange();
  return Exchange.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Exchange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Exchange}
 */
Exchange.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt64();
        msg.setExchangeId(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCreatorAddress(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setCreateTime(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setFirstTokenId(value);
        break;
      case 7:
        var value = /** @type {number} */reader.readInt64();
        msg.setFirstTokenBalance(value);
        break;
      case 8:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setSecondTokenId(value);
        break;
      case 9:
        var value = /** @type {number} */reader.readInt64();
        msg.setSecondTokenBalance(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Exchange.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Exchange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Exchange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Exchange.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getExchangeId();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getCreatorAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getFirstTokenId_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getFirstTokenBalance();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = message.getSecondTokenId_asU8();
  if (f.length > 0) {
    writer.writeBytes(8, f);
  }
  f = message.getSecondTokenBalance();
  if (f !== 0) {
    writer.writeInt64(9, f);
  }
};

/**
 * optional int64 exchange_id = 1;
 * @return {number}
 */
Exchange.prototype.getExchangeId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {number} value
 * @return {!Exchange} returns this
 */
Exchange.prototype.setExchangeId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes creator_address = 2;
 * @return {!(string|Uint8Array)}
 */
Exchange.prototype.getCreatorAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes creator_address = 2;
 * This is a type-conversion wrapper around `getCreatorAddress()`
 * @return {string}
 */
Exchange.prototype.getCreatorAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getCreatorAddress());
};

/**
 * optional bytes creator_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCreatorAddress()`
 * @return {!Uint8Array}
 */
Exchange.prototype.getCreatorAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCreatorAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Exchange} returns this
 */
Exchange.prototype.setCreatorAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional int64 create_time = 3;
 * @return {number}
 */
Exchange.prototype.getCreateTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!Exchange} returns this
 */
Exchange.prototype.setCreateTime = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes first_token_id = 6;
 * @return {!(string|Uint8Array)}
 */
Exchange.prototype.getFirstTokenId = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 6, "");
};

/**
 * optional bytes first_token_id = 6;
 * This is a type-conversion wrapper around `getFirstTokenId()`
 * @return {string}
 */
Exchange.prototype.getFirstTokenId_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getFirstTokenId());
};

/**
 * optional bytes first_token_id = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFirstTokenId()`
 * @return {!Uint8Array}
 */
Exchange.prototype.getFirstTokenId_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getFirstTokenId());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Exchange} returns this
 */
Exchange.prototype.setFirstTokenId = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * optional int64 first_token_balance = 7;
 * @return {number}
 */
Exchange.prototype.getFirstTokenBalance = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0);
};

/**
 * @param {number} value
 * @return {!Exchange} returns this
 */
Exchange.prototype.setFirstTokenBalance = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional bytes second_token_id = 8;
 * @return {!(string|Uint8Array)}
 */
Exchange.prototype.getSecondTokenId = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 8, "");
};

/**
 * optional bytes second_token_id = 8;
 * This is a type-conversion wrapper around `getSecondTokenId()`
 * @return {string}
 */
Exchange.prototype.getSecondTokenId_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getSecondTokenId());
};

/**
 * optional bytes second_token_id = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondTokenId()`
 * @return {!Uint8Array}
 */
Exchange.prototype.getSecondTokenId_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getSecondTokenId());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Exchange} returns this
 */
Exchange.prototype.setSecondTokenId = function (value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};

/**
 * optional int64 second_token_balance = 9;
 * @return {number}
 */
Exchange.prototype.getSecondTokenBalance = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 9, 0);
};

/**
 * @param {number} value
 * @return {!Exchange} returns this
 */
Exchange.prototype.setSecondTokenBalance = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
Account.repeatedFields_ = [5, 7, 16, 33];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Account.prototype.toObject = function (opt_includeInstance) {
    return Account.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Account} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Account.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountName: msg.getAccountName_asB64(),
        type: jspb.Message.getFieldWithDefault(msg, 2, 0),
        address: msg.getAddress_asB64(),
        balance: jspb.Message.getFieldWithDefault(msg, 4, 0),
        votesList: jspb.Message.toObjectList(msg.getVotesList(), Vote.toObject, includeInstance),
        assetMap: (f = msg.getAssetMap()) ? f.toObject(includeInstance, undefined) : [],
        assetv2Map: (f = msg.getAssetv2Map()) ? f.toObject(includeInstance, undefined) : [],
        frozenList: jspb.Message.toObjectList(msg.getFrozenList(), Account.Frozen.toObject, includeInstance),
        netUsage: jspb.Message.getFieldWithDefault(msg, 8, 0),
        acquiredDelegatedFrozenBalanceForBandwidth: jspb.Message.getFieldWithDefault(msg, 41, 0),
        delegatedFrozenBalanceForBandwidth: jspb.Message.getFieldWithDefault(msg, 42, 0),
        oldTronPower: jspb.Message.getFieldWithDefault(msg, 46, 0),
        tronPower: (f = msg.getTronPower()) && Account.Frozen.toObject(includeInstance, f),
        assetOptimized: jspb.Message.getBooleanFieldWithDefault(msg, 60, false),
        createTime: jspb.Message.getFieldWithDefault(msg, 9, 0),
        latestOprationTime: jspb.Message.getFieldWithDefault(msg, 10, 0),
        allowance: jspb.Message.getFieldWithDefault(msg, 11, 0),
        latestWithdrawTime: jspb.Message.getFieldWithDefault(msg, 12, 0),
        code: msg.getCode_asB64(),
        isWitness: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
        isCommittee: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
        frozenSupplyList: jspb.Message.toObjectList(msg.getFrozenSupplyList(), Account.Frozen.toObject, includeInstance),
        assetIssuedName: msg.getAssetIssuedName_asB64(),
        assetIssuedId: msg.getAssetIssuedId_asB64(),
        latestAssetOperationTimeMap: (f = msg.getLatestAssetOperationTimeMap()) ? f.toObject(includeInstance, undefined) : [],
        latestAssetOperationTimev2Map: (f = msg.getLatestAssetOperationTimev2Map()) ? f.toObject(includeInstance, undefined) : [],
        freeNetUsage: jspb.Message.getFieldWithDefault(msg, 19, 0),
        freeAssetNetUsageMap: (f = msg.getFreeAssetNetUsageMap()) ? f.toObject(includeInstance, undefined) : [],
        freeAssetNetUsagev2Map: (f = msg.getFreeAssetNetUsagev2Map()) ? f.toObject(includeInstance, undefined) : [],
        latestConsumeTime: jspb.Message.getFieldWithDefault(msg, 21, 0),
        latestConsumeFreeTime: jspb.Message.getFieldWithDefault(msg, 22, 0),
        accountId: msg.getAccountId_asB64(),
        accountResource: (f = msg.getAccountResource()) && Account.AccountResource.toObject(includeInstance, f),
        codehash: msg.getCodehash_asB64(),
        ownerPermission: (f = msg.getOwnerPermission()) && Permission.toObject(includeInstance, f),
        witnessPermission: (f = msg.getWitnessPermission()) && Permission.toObject(includeInstance, f),
        activePermissionList: jspb.Message.toObjectList(msg.getActivePermissionList(), Permission.toObject, includeInstance)
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Account}
 */
Account.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Account();
  return Account.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Account}
 */
Account.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAccountName(value);
        break;
      case 2:
        var value = /** @type {!AccountType} */reader.readEnum();
        msg.setType(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readInt64();
        msg.setBalance(value);
        break;
      case 5:
        var value = new Vote();
        reader.readMessage(value, Vote.deserializeBinaryFromReader);
        msg.addVotes(value);
        break;
      case 6:
        var value = msg.getAssetMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
        });
        break;
      case 56:
        var value = msg.getAssetv2Map();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
        });
        break;
      case 7:
        var value = new Account.Frozen();
        reader.readMessage(value, Account.Frozen.deserializeBinaryFromReader);
        msg.addFrozen(value);
        break;
      case 8:
        var value = /** @type {number} */reader.readInt64();
        msg.setNetUsage(value);
        break;
      case 41:
        var value = /** @type {number} */reader.readInt64();
        msg.setAcquiredDelegatedFrozenBalanceForBandwidth(value);
        break;
      case 42:
        var value = /** @type {number} */reader.readInt64();
        msg.setDelegatedFrozenBalanceForBandwidth(value);
        break;
      case 46:
        var value = /** @type {number} */reader.readInt64();
        msg.setOldTronPower(value);
        break;
      case 47:
        var value = new Account.Frozen();
        reader.readMessage(value, Account.Frozen.deserializeBinaryFromReader);
        msg.setTronPower(value);
        break;
      case 60:
        var value = /** @type {boolean} */reader.readBool();
        msg.setAssetOptimized(value);
        break;
      case 9:
        var value = /** @type {number} */reader.readInt64();
        msg.setCreateTime(value);
        break;
      case 10:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestOprationTime(value);
        break;
      case 11:
        var value = /** @type {number} */reader.readInt64();
        msg.setAllowance(value);
        break;
      case 12:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestWithdrawTime(value);
        break;
      case 13:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCode(value);
        break;
      case 14:
        var value = /** @type {boolean} */reader.readBool();
        msg.setIsWitness(value);
        break;
      case 15:
        var value = /** @type {boolean} */reader.readBool();
        msg.setIsCommittee(value);
        break;
      case 16:
        var value = new Account.Frozen();
        reader.readMessage(value, Account.Frozen.deserializeBinaryFromReader);
        msg.addFrozenSupply(value);
        break;
      case 17:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAssetIssuedName(value);
        break;
      case 57:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAssetIssuedId(value);
        break;
      case 18:
        var value = msg.getLatestAssetOperationTimeMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
        });
        break;
      case 58:
        var value = msg.getLatestAssetOperationTimev2Map();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
        });
        break;
      case 19:
        var value = /** @type {number} */reader.readInt64();
        msg.setFreeNetUsage(value);
        break;
      case 20:
        var value = msg.getFreeAssetNetUsageMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
        });
        break;
      case 59:
        var value = msg.getFreeAssetNetUsagev2Map();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt64, null, "", 0);
        });
        break;
      case 21:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestConsumeTime(value);
        break;
      case 22:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestConsumeFreeTime(value);
        break;
      case 23:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAccountId(value);
        break;
      case 26:
        var value = new Account.AccountResource();
        reader.readMessage(value, Account.AccountResource.deserializeBinaryFromReader);
        msg.setAccountResource(value);
        break;
      case 30:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCodehash(value);
        break;
      case 31:
        var value = new Permission();
        reader.readMessage(value, Permission.deserializeBinaryFromReader);
        msg.setOwnerPermission(value);
        break;
      case 32:
        var value = new Permission();
        reader.readMessage(value, Permission.deserializeBinaryFromReader);
        msg.setWitnessPermission(value);
        break;
      case 33:
        var value = new Permission();
        reader.readMessage(value, Permission.deserializeBinaryFromReader);
        msg.addActivePermission(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Account.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Account.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAccountName_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, Vote.serializeBinaryToWriter);
  }
  f = message.getAssetMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getAssetv2Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(56, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getFrozenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, Account.Frozen.serializeBinaryToWriter);
  }
  f = message.getNetUsage();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = message.getAcquiredDelegatedFrozenBalanceForBandwidth();
  if (f !== 0) {
    writer.writeInt64(41, f);
  }
  f = message.getDelegatedFrozenBalanceForBandwidth();
  if (f !== 0) {
    writer.writeInt64(42, f);
  }
  f = message.getOldTronPower();
  if (f !== 0) {
    writer.writeInt64(46, f);
  }
  f = message.getTronPower();
  if (f != null) {
    writer.writeMessage(47, f, Account.Frozen.serializeBinaryToWriter);
  }
  f = message.getAssetOptimized();
  if (f) {
    writer.writeBool(60, f);
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(9, f);
  }
  f = message.getLatestOprationTime();
  if (f !== 0) {
    writer.writeInt64(10, f);
  }
  f = message.getAllowance();
  if (f !== 0) {
    writer.writeInt64(11, f);
  }
  f = message.getLatestWithdrawTime();
  if (f !== 0) {
    writer.writeInt64(12, f);
  }
  f = message.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(13, f);
  }
  f = message.getIsWitness();
  if (f) {
    writer.writeBool(14, f);
  }
  f = message.getIsCommittee();
  if (f) {
    writer.writeBool(15, f);
  }
  f = message.getFrozenSupplyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(16, f, Account.Frozen.serializeBinaryToWriter);
  }
  f = message.getAssetIssuedName_asU8();
  if (f.length > 0) {
    writer.writeBytes(17, f);
  }
  f = message.getAssetIssuedId_asU8();
  if (f.length > 0) {
    writer.writeBytes(57, f);
  }
  f = message.getLatestAssetOperationTimeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(18, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getLatestAssetOperationTimev2Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(58, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getFreeNetUsage();
  if (f !== 0) {
    writer.writeInt64(19, f);
  }
  f = message.getFreeAssetNetUsageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(20, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getFreeAssetNetUsagev2Map(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(59, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getLatestConsumeTime();
  if (f !== 0) {
    writer.writeInt64(21, f);
  }
  f = message.getLatestConsumeFreeTime();
  if (f !== 0) {
    writer.writeInt64(22, f);
  }
  f = message.getAccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(23, f);
  }
  f = message.getAccountResource();
  if (f != null) {
    writer.writeMessage(26, f, Account.AccountResource.serializeBinaryToWriter);
  }
  f = message.getCodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(30, f);
  }
  f = message.getOwnerPermission();
  if (f != null) {
    writer.writeMessage(31, f, Permission.serializeBinaryToWriter);
  }
  f = message.getWitnessPermission();
  if (f != null) {
    writer.writeMessage(32, f, Permission.serializeBinaryToWriter);
  }
  f = message.getActivePermissionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(33, f, Permission.serializeBinaryToWriter);
  }
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Account.Frozen.prototype.toObject = function (opt_includeInstance) {
    return Account.Frozen.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Account.Frozen} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Account.Frozen.toObject = function (includeInstance, msg) {
    var obj = {
      frozenBalance: jspb.Message.getFieldWithDefault(msg, 1, 0),
      expireTime: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Account.Frozen}
 */
Account.Frozen.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Account.Frozen();
  return Account.Frozen.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Account.Frozen} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Account.Frozen}
 */
Account.Frozen.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt64();
        msg.setFrozenBalance(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readInt64();
        msg.setExpireTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Account.Frozen.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Account.Frozen.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Account.Frozen} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Account.Frozen.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFrozenBalance();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getExpireTime();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * optional int64 frozen_balance = 1;
 * @return {number}
 */
Account.Frozen.prototype.getFrozenBalance = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {number} value
 * @return {!Account.Frozen} returns this
 */
Account.Frozen.prototype.setFrozenBalance = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int64 expire_time = 2;
 * @return {number}
 */
Account.Frozen.prototype.getExpireTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!Account.Frozen} returns this
 */
Account.Frozen.prototype.setExpireTime = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Account.AccountResource.prototype.toObject = function (opt_includeInstance) {
    return Account.AccountResource.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Account.AccountResource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Account.AccountResource.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        energyUsage: jspb.Message.getFieldWithDefault(msg, 1, 0),
        frozenBalanceForEnergy: (f = msg.getFrozenBalanceForEnergy()) && Account.Frozen.toObject(includeInstance, f),
        latestConsumeTimeForEnergy: jspb.Message.getFieldWithDefault(msg, 3, 0),
        acquiredDelegatedFrozenBalanceForEnergy: jspb.Message.getFieldWithDefault(msg, 4, 0),
        delegatedFrozenBalanceForEnergy: jspb.Message.getFieldWithDefault(msg, 5, 0),
        storageLimit: jspb.Message.getFieldWithDefault(msg, 6, 0),
        storageUsage: jspb.Message.getFieldWithDefault(msg, 7, 0),
        latestExchangeStorageTime: jspb.Message.getFieldWithDefault(msg, 8, 0)
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Account.AccountResource}
 */
Account.AccountResource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Account.AccountResource();
  return Account.AccountResource.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Account.AccountResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Account.AccountResource}
 */
Account.AccountResource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt64();
        msg.setEnergyUsage(value);
        break;
      case 2:
        var value = new Account.Frozen();
        reader.readMessage(value, Account.Frozen.deserializeBinaryFromReader);
        msg.setFrozenBalanceForEnergy(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestConsumeTimeForEnergy(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readInt64();
        msg.setAcquiredDelegatedFrozenBalanceForEnergy(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt64();
        msg.setDelegatedFrozenBalanceForEnergy(value);
        break;
      case 6:
        var value = /** @type {number} */reader.readInt64();
        msg.setStorageLimit(value);
        break;
      case 7:
        var value = /** @type {number} */reader.readInt64();
        msg.setStorageUsage(value);
        break;
      case 8:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestExchangeStorageTime(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Account.AccountResource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Account.AccountResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Account.AccountResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Account.AccountResource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEnergyUsage();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getFrozenBalanceForEnergy();
  if (f != null) {
    writer.writeMessage(2, f, Account.Frozen.serializeBinaryToWriter);
  }
  f = message.getLatestConsumeTimeForEnergy();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getAcquiredDelegatedFrozenBalanceForEnergy();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = message.getDelegatedFrozenBalanceForEnergy();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getStorageLimit();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = message.getStorageUsage();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = message.getLatestExchangeStorageTime();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
};

/**
 * optional int64 energy_usage = 1;
 * @return {number}
 */
Account.AccountResource.prototype.getEnergyUsage = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {number} value
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.setEnergyUsage = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional Frozen frozen_balance_for_energy = 2;
 * @return {?Account.Frozen}
 */
Account.AccountResource.prototype.getFrozenBalanceForEnergy = function () {
  return /** @type{?Account.Frozen} */(
    jspb.Message.getWrapperField(this, Account.Frozen, 2)
  );
};

/**
 * @param {?Account.Frozen|undefined} value
 * @return {!Account.AccountResource} returns this
*/
Account.AccountResource.prototype.setFrozenBalanceForEnergy = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.clearFrozenBalanceForEnergy = function () {
  return this.setFrozenBalanceForEnergy(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
Account.AccountResource.prototype.hasFrozenBalanceForEnergy = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional int64 latest_consume_time_for_energy = 3;
 * @return {number}
 */
Account.AccountResource.prototype.getLatestConsumeTimeForEnergy = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.setLatestConsumeTimeForEnergy = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int64 acquired_delegated_frozen_balance_for_energy = 4;
 * @return {number}
 */
Account.AccountResource.prototype.getAcquiredDelegatedFrozenBalanceForEnergy = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.setAcquiredDelegatedFrozenBalanceForEnergy = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int64 delegated_frozen_balance_for_energy = 5;
 * @return {number}
 */
Account.AccountResource.prototype.getDelegatedFrozenBalanceForEnergy = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.setDelegatedFrozenBalanceForEnergy = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 storage_limit = 6;
 * @return {number}
 */
Account.AccountResource.prototype.getStorageLimit = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0);
};

/**
 * @param {number} value
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.setStorageLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int64 storage_usage = 7;
 * @return {number}
 */
Account.AccountResource.prototype.getStorageUsage = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0);
};

/**
 * @param {number} value
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.setStorageUsage = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int64 latest_exchange_storage_time = 8;
 * @return {number}
 */
Account.AccountResource.prototype.getLatestExchangeStorageTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 8, 0);
};

/**
 * @param {number} value
 * @return {!Account.AccountResource} returns this
 */
Account.AccountResource.prototype.setLatestExchangeStorageTime = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional bytes account_name = 1;
 * @return {!(string|Uint8Array)}
 */
Account.prototype.getAccountName = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes account_name = 1;
 * This is a type-conversion wrapper around `getAccountName()`
 * @return {string}
 */
Account.prototype.getAccountName_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAccountName());
};

/**
 * optional bytes account_name = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountName()`
 * @return {!Uint8Array}
 */
Account.prototype.getAccountName_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAccountName());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Account} returns this
 */
Account.prototype.setAccountName = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional AccountType type = 2;
 * @return {!AccountType}
 */
Account.prototype.getType = function () {
  return /** @type {!AccountType} */jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {!AccountType} value
 * @return {!Account} returns this
 */
Account.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional bytes address = 3;
 * @return {!(string|Uint8Array)}
 */
Account.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "");
};

/**
 * optional bytes address = 3;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
Account.prototype.getAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAddress());
};

/**
 * optional bytes address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
Account.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Account} returns this
 */
Account.prototype.setAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional int64 balance = 4;
 * @return {number}
 */
Account.prototype.getBalance = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setBalance = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * repeated Vote votes = 5;
 * @return {!Array<!Vote>}
 */
Account.prototype.getVotesList = function () {
  return /** @type{!Array<!Vote>} */(
    jspb.Message.getRepeatedWrapperField(this, Vote, 5)
  );
};

/**
 * @param {!Array<!Vote>} value
 * @return {!Account} returns this
*/
Account.prototype.setVotesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!export const Vote =} opt_value
 * @param {number=} opt_index
 * @return {!Vote}
 */
Account.prototype.addVotes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, Vote, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearVotesList = function () {
  return this.setVotesList([]);
};

/**
 * map<string, int64> asset = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
Account.prototype.getAssetMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */(
    jspb.Message.getMapField(this, 6, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearAssetMap = function () {
  this.getAssetMap().clear();
  return this;
};

/**
 * map<string, int64> assetV2 = 56;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
Account.prototype.getAssetv2Map = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */(
    jspb.Message.getMapField(this, 56, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearAssetv2Map = function () {
  this.getAssetv2Map().clear();
  return this;
};

/**
 * repeated Frozen frozen = 7;
 * @return {!Array<!Account.Frozen>}
 */
Account.prototype.getFrozenList = function () {
  return /** @type{!Array<!Account.Frozen>} */(
    jspb.Message.getRepeatedWrapperField(this, Account.Frozen, 7)
  );
};

/**
 * @param {!Array<!Account.Frozen>} value
 * @return {!Account} returns this
*/
Account.prototype.setFrozenList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!Account.Frozen=} opt_value
 * @param {number=} opt_index
 * @return {!Account.Frozen}
 */
Account.prototype.addFrozen = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, Account.Frozen, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearFrozenList = function () {
  return this.setFrozenList([]);
};

/**
 * optional int64 net_usage = 8;
 * @return {number}
 */
Account.prototype.getNetUsage = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 8, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setNetUsage = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
 * @return {number}
 */
Account.prototype.getAcquiredDelegatedFrozenBalanceForBandwidth = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 41, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setAcquiredDelegatedFrozenBalanceForBandwidth = function (value) {
  return jspb.Message.setProto3IntField(this, 41, value);
};

/**
 * optional int64 delegated_frozen_balance_for_bandwidth = 42;
 * @return {number}
 */
Account.prototype.getDelegatedFrozenBalanceForBandwidth = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 42, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setDelegatedFrozenBalanceForBandwidth = function (value) {
  return jspb.Message.setProto3IntField(this, 42, value);
};

/**
 * optional int64 old_tron_power = 46;
 * @return {number}
 */
Account.prototype.getOldTronPower = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 46, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setOldTronPower = function (value) {
  return jspb.Message.setProto3IntField(this, 46, value);
};

/**
 * optional Frozen tron_power = 47;
 * @return {?Account.Frozen}
 */
Account.prototype.getTronPower = function () {
  return /** @type{?Account.Frozen} */(
    jspb.Message.getWrapperField(this, Account.Frozen, 47)
  );
};

/**
 * @param {?Account.Frozen|undefined} value
 * @return {!Account} returns this
*/
Account.prototype.setTronPower = function (value) {
  return jspb.Message.setWrapperField(this, 47, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!Account} returns this
 */
Account.prototype.clearTronPower = function () {
  return this.setTronPower(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
Account.prototype.hasTronPower = function () {
  return jspb.Message.getField(this, 47) != null;
};

/**
 * optional bool asset_optimized = 60;
 * @return {boolean}
 */
Account.prototype.getAssetOptimized = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 60, false);
};

/**
 * @param {boolean} value
 * @return {!Account} returns this
 */
Account.prototype.setAssetOptimized = function (value) {
  return jspb.Message.setProto3BooleanField(this, 60, value);
};

/**
 * optional int64 create_time = 9;
 * @return {number}
 */
Account.prototype.getCreateTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 9, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setCreateTime = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int64 latest_opration_time = 10;
 * @return {number}
 */
Account.prototype.getLatestOprationTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 10, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setLatestOprationTime = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional int64 allowance = 11;
 * @return {number}
 */
Account.prototype.getAllowance = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 11, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setAllowance = function (value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};

/**
 * optional int64 latest_withdraw_time = 12;
 * @return {number}
 */
Account.prototype.getLatestWithdrawTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 12, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setLatestWithdrawTime = function (value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional bytes code = 13;
 * @return {!(string|Uint8Array)}
 */
Account.prototype.getCode = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 13, "");
};

/**
 * optional bytes code = 13;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
Account.prototype.getCode_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getCode());
};

/**
 * optional bytes code = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
Account.prototype.getCode_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCode());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Account} returns this
 */
Account.prototype.setCode = function (value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};

/**
 * optional bool is_witness = 14;
 * @return {boolean}
 */
Account.prototype.getIsWitness = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 14, false);
};

/**
 * @param {boolean} value
 * @return {!Account} returns this
 */
Account.prototype.setIsWitness = function (value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};

/**
 * optional bool is_committee = 15;
 * @return {boolean}
 */
Account.prototype.getIsCommittee = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 15, false);
};

/**
 * @param {boolean} value
 * @return {!Account} returns this
 */
Account.prototype.setIsCommittee = function (value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};

/**
 * repeated Frozen frozen_supply = 16;
 * @return {!Array<!Account.Frozen>}
 */
Account.prototype.getFrozenSupplyList = function () {
  return /** @type{!Array<!Account.Frozen>} */(
    jspb.Message.getRepeatedWrapperField(this, Account.Frozen, 16)
  );
};

/**
 * @param {!Array<!Account.Frozen>} value
 * @return {!Account} returns this
*/
Account.prototype.setFrozenSupplyList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};

/**
 * @param {!Account.Frozen=} opt_value
 * @param {number=} opt_index
 * @return {!Account.Frozen}
 */
Account.prototype.addFrozenSupply = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, Account.Frozen, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearFrozenSupplyList = function () {
  return this.setFrozenSupplyList([]);
};

/**
 * optional bytes asset_issued_name = 17;
 * @return {!(string|Uint8Array)}
 */
Account.prototype.getAssetIssuedName = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 17, "");
};

/**
 * optional bytes asset_issued_name = 17;
 * This is a type-conversion wrapper around `getAssetIssuedName()`
 * @return {string}
 */
Account.prototype.getAssetIssuedName_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAssetIssuedName());
};

/**
 * optional bytes asset_issued_name = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetIssuedName()`
 * @return {!Uint8Array}
 */
Account.prototype.getAssetIssuedName_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAssetIssuedName());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Account} returns this
 */
Account.prototype.setAssetIssuedName = function (value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};

/**
 * optional bytes asset_issued_ID = 57;
 * @return {!(string|Uint8Array)}
 */
Account.prototype.getAssetIssuedId = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 57, "");
};

/**
 * optional bytes asset_issued_ID = 57;
 * This is a type-conversion wrapper around `getAssetIssuedId()`
 * @return {string}
 */
Account.prototype.getAssetIssuedId_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAssetIssuedId());
};

/**
 * optional bytes asset_issued_ID = 57;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetIssuedId()`
 * @return {!Uint8Array}
 */
Account.prototype.getAssetIssuedId_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAssetIssuedId());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Account} returns this
 */
Account.prototype.setAssetIssuedId = function (value) {
  return jspb.Message.setProto3BytesField(this, 57, value);
};

/**
 * map<string, int64> latest_asset_operation_time = 18;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
Account.prototype.getLatestAssetOperationTimeMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */(
    jspb.Message.getMapField(this, 18, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearLatestAssetOperationTimeMap = function () {
  this.getLatestAssetOperationTimeMap().clear();
  return this;
};

/**
 * map<string, int64> latest_asset_operation_timeV2 = 58;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
Account.prototype.getLatestAssetOperationTimev2Map = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */(
    jspb.Message.getMapField(this, 58, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearLatestAssetOperationTimev2Map = function () {
  this.getLatestAssetOperationTimev2Map().clear();
  return this;
};

/**
 * optional int64 free_net_usage = 19;
 * @return {number}
 */
Account.prototype.getFreeNetUsage = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 19, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setFreeNetUsage = function (value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};

/**
 * map<string, int64> free_asset_net_usage = 20;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
Account.prototype.getFreeAssetNetUsageMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */(
    jspb.Message.getMapField(this, 20, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearFreeAssetNetUsageMap = function () {
  this.getFreeAssetNetUsageMap().clear();
  return this;
};

/**
 * map<string, int64> free_asset_net_usageV2 = 59;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
Account.prototype.getFreeAssetNetUsagev2Map = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */(
    jspb.Message.getMapField(this, 59, opt_noLazyCreate, null)
  );
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearFreeAssetNetUsagev2Map = function () {
  this.getFreeAssetNetUsagev2Map().clear();
  return this;
};

/**
 * optional int64 latest_consume_time = 21;
 * @return {number}
 */
Account.prototype.getLatestConsumeTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 21, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setLatestConsumeTime = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

/**
 * optional int64 latest_consume_free_time = 22;
 * @return {number}
 */
Account.prototype.getLatestConsumeFreeTime = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 22, 0);
};

/**
 * @param {number} value
 * @return {!Account} returns this
 */
Account.prototype.setLatestConsumeFreeTime = function (value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};

/**
 * optional bytes account_id = 23;
 * @return {!(string|Uint8Array)}
 */
Account.prototype.getAccountId = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 23, "");
};

/**
 * optional bytes account_id = 23;
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {string}
 */
Account.prototype.getAccountId_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAccountId());
};

/**
 * optional bytes account_id = 23;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountId()`
 * @return {!Uint8Array}
 */
Account.prototype.getAccountId_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAccountId());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Account} returns this
 */
Account.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3BytesField(this, 23, value);
};

/**
 * optional AccountResource account_resource = 26;
 * @return {?Account.AccountResource}
 */
Account.prototype.getAccountResource = function () {
  return /** @type{?Account.AccountResource} */(
    jspb.Message.getWrapperField(this, Account.AccountResource, 26)
  );
};

/**
 * @param {?Account.AccountResource|undefined} value
 * @return {!Account} returns this
*/
Account.prototype.setAccountResource = function (value) {
  return jspb.Message.setWrapperField(this, 26, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!Account} returns this
 */
Account.prototype.clearAccountResource = function () {
  return this.setAccountResource(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
Account.prototype.hasAccountResource = function () {
  return jspb.Message.getField(this, 26) != null;
};

/**
 * optional bytes codeHash = 30;
 * @return {!(string|Uint8Array)}
 */
Account.prototype.getCodehash = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 30, "");
};

/**
 * optional bytes codeHash = 30;
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {string}
 */
Account.prototype.getCodehash_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getCodehash());
};

/**
 * optional bytes codeHash = 30;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {!Uint8Array}
 */
Account.prototype.getCodehash_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCodehash());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Account} returns this
 */
Account.prototype.setCodehash = function (value) {
  return jspb.Message.setProto3BytesField(this, 30, value);
};

/**
 * optional Permission owner_permission = 31;
 * @return {?Permission}
 */
Account.prototype.getOwnerPermission = function () {
  return /** @type{?Permission} */(
    jspb.Message.getWrapperField(this, Permission, 31)
  );
};

/**
 * @param {?Permission|undefined} value
 * @return {!Account} returns this
*/
Account.prototype.setOwnerPermission = function (value) {
  return jspb.Message.setWrapperField(this, 31, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!Account} returns this
 */
Account.prototype.clearOwnerPermission = function () {
  return this.setOwnerPermission(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
Account.prototype.hasOwnerPermission = function () {
  return jspb.Message.getField(this, 31) != null;
};

/**
 * optional Permission witness_permission = 32;
 * @return {?Permission}
 */
Account.prototype.getWitnessPermission = function () {
  return /** @type{?Permission} */(
    jspb.Message.getWrapperField(this, Permission, 32)
  );
};

/**
 * @param {?Permission|undefined} value
 * @return {!Account} returns this
*/
Account.prototype.setWitnessPermission = function (value) {
  return jspb.Message.setWrapperField(this, 32, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!Account} returns this
 */
Account.prototype.clearWitnessPermission = function () {
  return this.setWitnessPermission(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
Account.prototype.hasWitnessPermission = function () {
  return jspb.Message.getField(this, 32) != null;
};

/**
 * repeated Permission active_permission = 33;
 * @return {!Array<!Permission>}
 */
Account.prototype.getActivePermissionList = function () {
  return /** @type{!Array<!Permission>} */(
    jspb.Message.getRepeatedWrapperField(this, Permission, 33)
  );
};

/**
 * @param {!Array<!Permission>} value
 * @return {!Account} returns this
*/
Account.prototype.setActivePermissionList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 33, value);
};

/**
 * @param {!export const Permission =} opt_value
 * @param {number=} opt_index
 * @return {!Permission}
 */
Account.prototype.addActivePermission = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, Permission, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Account} returns this
 */
Account.prototype.clearActivePermissionList = function () {
  return this.setActivePermissionList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Key.prototype.toObject = function (opt_includeInstance) {
    return Key.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Key} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Key.toObject = function (includeInstance, msg) {
    var obj = {
      address: msg.getAddress_asB64(),
      weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Key}
 */
Key.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Key();
  return Key.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Key}
 */
Key.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readInt64();
        msg.setWeight(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Key.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Key.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
Key.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
Key.prototype.getAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAddress());
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
Key.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Key} returns this
 */
Key.prototype.setAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional int64 weight = 2;
 * @return {number}
 */
Key.prototype.getWeight = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!Key} returns this
 */
Key.prototype.setWeight = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  DelegatedResource.prototype.toObject = function (opt_includeInstance) {
    return DelegatedResource.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!DelegatedResource} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  DelegatedResource.toObject = function (includeInstance, msg) {
    var obj = {
      from: msg.getFrom_asB64(),
      to: msg.getTo_asB64(),
      frozenBalanceForBandwidth: jspb.Message.getFieldWithDefault(msg, 3, 0),
      frozenBalanceForEnergy: jspb.Message.getFieldWithDefault(msg, 4, 0),
      expireTimeForBandwidth: jspb.Message.getFieldWithDefault(msg, 5, 0),
      expireTimeForEnergy: jspb.Message.getFieldWithDefault(msg, 6, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!DelegatedResource}
 */
DelegatedResource.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new DelegatedResource();
  return DelegatedResource.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!DelegatedResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!DelegatedResource}
 */
DelegatedResource.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setFrom(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setTo(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setFrozenBalanceForBandwidth(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readInt64();
        msg.setFrozenBalanceForEnergy(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt64();
        msg.setExpireTimeForBandwidth(value);
        break;
      case 6:
        var value = /** @type {number} */reader.readInt64();
        msg.setExpireTimeForEnergy(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
DelegatedResource.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  DelegatedResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!DelegatedResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
DelegatedResource.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getFrozenBalanceForBandwidth();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getFrozenBalanceForEnergy();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = message.getExpireTimeForBandwidth();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getExpireTimeForEnergy();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
};

/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
DelegatedResource.prototype.getFrom = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
DelegatedResource.prototype.getFrom_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getFrom());
};

/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
DelegatedResource.prototype.getFrom_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getFrom());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!DelegatedResource} returns this
 */
DelegatedResource.prototype.setFrom = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes to = 2;
 * @return {!(string|Uint8Array)}
 */
DelegatedResource.prototype.getTo = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes to = 2;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
DelegatedResource.prototype.getTo_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getTo());
};

/**
 * optional bytes to = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
DelegatedResource.prototype.getTo_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getTo());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!DelegatedResource} returns this
 */
DelegatedResource.prototype.setTo = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional int64 frozen_balance_for_bandwidth = 3;
 * @return {number}
 */
DelegatedResource.prototype.getFrozenBalanceForBandwidth = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!DelegatedResource} returns this
 */
DelegatedResource.prototype.setFrozenBalanceForBandwidth = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int64 frozen_balance_for_energy = 4;
 * @return {number}
 */
DelegatedResource.prototype.getFrozenBalanceForEnergy = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!DelegatedResource} returns this
 */
DelegatedResource.prototype.setFrozenBalanceForEnergy = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int64 expire_time_for_bandwidth = 5;
 * @return {number}
 */
DelegatedResource.prototype.getExpireTimeForBandwidth = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!DelegatedResource} returns this
 */
DelegatedResource.prototype.setExpireTimeForBandwidth = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 expire_time_for_energy = 6;
 * @return {number}
 */
DelegatedResource.prototype.getExpireTimeForEnergy = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0);
};

/**
 * @param {number} value
 * @return {!DelegatedResource} returns this
 */
DelegatedResource.prototype.setExpireTimeForEnergy = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  authority.prototype.toObject = function (opt_includeInstance) {
    return authority.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!authority} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  authority.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        account: (f = msg.getAccount()) && AccountId.toObject(includeInstance, f),
        permissionName: msg.getPermissionName_asB64()
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!authority}
 */
authority.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new authority();
  return authority.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!authority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!authority}
 */
authority.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new AccountId();
        reader.readMessage(value, AccountId.deserializeBinaryFromReader);
        msg.setAccount(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setPermissionName(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
authority.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  authority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!authority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
authority.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(1, f, AccountId.serializeBinaryToWriter);
  }
  f = message.getPermissionName_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional AccountId account = 1;
 * @return {?AccountId}
 */
authority.prototype.getAccount = function () {
  return /** @type{?AccountId} */(
    jspb.Message.getWrapperField(this, AccountId, 1)
  );
};

/**
 * @param {?AccountId|undefined} value
 * @return {!authority} returns this
*/
authority.prototype.setAccount = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!authority} returns this
 */
authority.prototype.clearAccount = function () {
  return this.setAccount(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
authority.prototype.hasAccount = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes permission_name = 2;
 * @return {!(string|Uint8Array)}
 */
authority.prototype.getPermissionName = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes permission_name = 2;
 * This is a type-conversion wrapper around `getPermissionName()`
 * @return {string}
 */
authority.prototype.getPermissionName_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getPermissionName());
};

/**
 * optional bytes permission_name = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPermissionName()`
 * @return {!Uint8Array}
 */
authority.prototype.getPermissionName_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getPermissionName());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!authority} returns this
 */
authority.prototype.setPermissionName = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
Permission.repeatedFields_ = [7];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Permission.prototype.toObject = function (opt_includeInstance) {
    return Permission.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Permission} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Permission.toObject = function (includeInstance, msg) {
    var obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      id: jspb.Message.getFieldWithDefault(msg, 2, 0),
      permissionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
      threshold: jspb.Message.getFieldWithDefault(msg, 4, 0),
      parentId: jspb.Message.getFieldWithDefault(msg, 5, 0),
      operations: msg.getOperations_asB64(),
      keysList: jspb.Message.toObjectList(msg.getKeysList(), Key.toObject, includeInstance)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Permission}
 */
Permission.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Permission();
  return Permission.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Permission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Permission}
 */
Permission.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Permission.PermissionType} */reader.readEnum();
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readInt32();
        msg.setId(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setPermissionName(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readInt64();
        msg.setThreshold(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt32();
        msg.setParentId(value);
        break;
      case 6:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOperations(value);
        break;
      case 7:
        var value = new Key();
        reader.readMessage(value, Key.deserializeBinaryFromReader);
        msg.addKeys(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Permission.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Permission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Permission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Permission.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getPermissionName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
  f = message.getParentId();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
  f = message.getOperations_asU8();
  if (f.length > 0) {
    writer.writeBytes(6, f);
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(7, f, Key.serializeBinaryToWriter);
  }
};

/**
 * @enum {number}
 */
Permission.PermissionType = {
  OWNER: 0,
  WITNESS: 1,
  ACTIVE: 2
};

/**
 * optional PermissionType type = 1;
 * @return {!Permission.PermissionType}
 */
Permission.prototype.getType = function () {
  return /** @type {!Permission.PermissionType} */jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {!Permission.PermissionType} value
 * @return {!Permission} returns this
 */
Permission.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional int32 id = 2;
 * @return {number}
 */
Permission.prototype.getId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!Permission} returns this
 */
Permission.prototype.setId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string permission_name = 3;
 * @return {string}
 */
Permission.prototype.getPermissionName = function () {
  return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
};

/**
 * @param {string} value
 * @return {!Permission} returns this
 */
Permission.prototype.setPermissionName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int64 threshold = 4;
 * @return {number}
 */
Permission.prototype.getThreshold = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!Permission} returns this
 */
Permission.prototype.setThreshold = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int32 parent_id = 5;
 * @return {number}
 */
Permission.prototype.getParentId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!Permission} returns this
 */
Permission.prototype.setParentId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional bytes operations = 6;
 * @return {!(string|Uint8Array)}
 */
Permission.prototype.getOperations = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 6, "");
};

/**
 * optional bytes operations = 6;
 * This is a type-conversion wrapper around `getOperations()`
 * @return {string}
 */
Permission.prototype.getOperations_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOperations());
};

/**
 * optional bytes operations = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperations()`
 * @return {!Uint8Array}
 */
Permission.prototype.getOperations_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOperations());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Permission} returns this
 */
Permission.prototype.setOperations = function (value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};

/**
 * repeated Key keys = 7;
 * @return {!Array<!Key>}
 */
Permission.prototype.getKeysList = function () {
  return /** @type{!Array<!Key>} */(
    jspb.Message.getRepeatedWrapperField(this, Key, 7)
  );
};

/**
 * @param {!Array<!Key>} value
 * @return {!Permission} returns this
*/
Permission.prototype.setKeysList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!export const Key =} opt_value
 * @param {number=} opt_index
 * @return {!Key}
 */
Permission.prototype.addKeys = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, Key, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Permission} returns this
 */
Permission.prototype.clearKeysList = function () {
  return this.setKeysList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Witness.prototype.toObject = function (opt_includeInstance) {
    return Witness.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Witness} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Witness.toObject = function (includeInstance, msg) {
    var obj = {
      address: msg.getAddress_asB64(),
      votecount: jspb.Message.getFieldWithDefault(msg, 2, 0),
      pubkey: msg.getPubkey_asB64(),
      url: jspb.Message.getFieldWithDefault(msg, 4, ""),
      totalproduced: jspb.Message.getFieldWithDefault(msg, 5, 0),
      totalmissed: jspb.Message.getFieldWithDefault(msg, 6, 0),
      latestblocknum: jspb.Message.getFieldWithDefault(msg, 7, 0),
      latestslotnum: jspb.Message.getFieldWithDefault(msg, 8, 0),
      isjobs: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Witness}
 */
Witness.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Witness();
  return Witness.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Witness} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Witness}
 */
Witness.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readInt64();
        msg.setVotecount(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setPubkey(value);
        break;
      case 4:
        var value = /** @type {string} */reader.readString();
        msg.setUrl(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt64();
        msg.setTotalproduced(value);
        break;
      case 6:
        var value = /** @type {number} */reader.readInt64();
        msg.setTotalmissed(value);
        break;
      case 7:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestblocknum(value);
        break;
      case 8:
        var value = /** @type {number} */reader.readInt64();
        msg.setLatestslotnum(value);
        break;
      case 9:
        var value = /** @type {boolean} */reader.readBool();
        msg.setIsjobs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Witness.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Witness.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Witness} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Witness.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getVotecount();
  if (f !== 0) {
    writer.writeInt64(2, f);
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getTotalproduced();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getTotalmissed();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = message.getLatestblocknum();
  if (f !== 0) {
    writer.writeInt64(7, f);
  }
  f = message.getLatestslotnum();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = message.getIsjobs();
  if (f) {
    writer.writeBool(9, f);
  }
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
Witness.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
Witness.prototype.getAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAddress());
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
Witness.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Witness} returns this
 */
Witness.prototype.setAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional int64 voteCount = 2;
 * @return {number}
 */
Witness.prototype.getVotecount = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {number} value
 * @return {!Witness} returns this
 */
Witness.prototype.setVotecount = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional bytes pubKey = 3;
 * @return {!(string|Uint8Array)}
 */
Witness.prototype.getPubkey = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "");
};

/**
 * optional bytes pubKey = 3;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
Witness.prototype.getPubkey_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getPubkey());
};

/**
 * optional bytes pubKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
Witness.prototype.getPubkey_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getPubkey());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Witness} returns this
 */
Witness.prototype.setPubkey = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional string url = 4;
 * @return {string}
 */
Witness.prototype.getUrl = function () {
  return /** @type {string} */jspb.Message.getFieldWithDefault(this, 4, "");
};

/**
 * @param {string} value
 * @return {!Witness} returns this
 */
Witness.prototype.setUrl = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int64 totalProduced = 5;
 * @return {number}
 */
Witness.prototype.getTotalproduced = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!Witness} returns this
 */
Witness.prototype.setTotalproduced = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 totalMissed = 6;
 * @return {number}
 */
Witness.prototype.getTotalmissed = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0);
};

/**
 * @param {number} value
 * @return {!Witness} returns this
 */
Witness.prototype.setTotalmissed = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int64 latestBlockNum = 7;
 * @return {number}
 */
Witness.prototype.getLatestblocknum = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 7, 0);
};

/**
 * @param {number} value
 * @return {!Witness} returns this
 */
Witness.prototype.setLatestblocknum = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int64 latestSlotNum = 8;
 * @return {number}
 */
Witness.prototype.getLatestslotnum = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 8, 0);
};

/**
 * @param {number} value
 * @return {!Witness} returns this
 */
Witness.prototype.setLatestslotnum = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional bool isJobs = 9;
 * @return {boolean}
 */
Witness.prototype.getIsjobs = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 9, false);
};

/**
 * @param {boolean} value
 * @return {!Witness} returns this
 */
Witness.prototype.setIsjobs = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
Votes.repeatedFields_ = [2, 3];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Votes.prototype.toObject = function (opt_includeInstance) {
    return Votes.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Votes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Votes.toObject = function (includeInstance, msg) {
    var obj = {
      address: msg.getAddress_asB64(),
      oldVotesList: jspb.Message.toObjectList(msg.getOldVotesList(), Vote.toObject, includeInstance),
      newVotesList: jspb.Message.toObjectList(msg.getNewVotesList(), Vote.toObject, includeInstance)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Votes}
 */
Votes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Votes();
  return Votes.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Votes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Votes}
 */
Votes.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setAddress(value);
        break;
      case 2:
        var value = new Vote();
        reader.readMessage(value, Vote.deserializeBinaryFromReader);
        msg.addOldVotes(value);
        break;
      case 3:
        var value = new Vote();
        reader.readMessage(value, Vote.deserializeBinaryFromReader);
        msg.addNewVotes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Votes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Votes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Votes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Votes.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getOldVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, Vote.serializeBinaryToWriter);
  }
  f = message.getNewVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(3, f, Vote.serializeBinaryToWriter);
  }
};

/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
Votes.prototype.getAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
Votes.prototype.getAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getAddress());
};

/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
Votes.prototype.getAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Votes} returns this
 */
Votes.prototype.setAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * repeated Vote old_votes = 2;
 * @return {!Array<!Vote>}
 */
Votes.prototype.getOldVotesList = function () {
  return /** @type{!Array<!Vote>} */(
    jspb.Message.getRepeatedWrapperField(this, Vote, 2)
  );
};

/**
 * @param {!Array<!Vote>} value
 * @return {!Votes} returns this
*/
Votes.prototype.setOldVotesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!export const Vote =} opt_value
 * @param {number=} opt_index
 * @return {!Vote}
 */
Votes.prototype.addOldVotes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, Vote, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Votes} returns this
 */
Votes.prototype.clearOldVotesList = function () {
  return this.setOldVotesList([]);
};

/**
 * repeated Vote new_votes = 3;
 * @return {!Array<!Vote>}
 */
Votes.prototype.getNewVotesList = function () {
  return /** @type{!Array<!Vote>} */(
    jspb.Message.getRepeatedWrapperField(this, Vote, 3)
  );
};

/**
 * @param {!Array<!Vote>} value
 * @return {!Votes} returns this
*/
Votes.prototype.setNewVotesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!export const Vote =} opt_value
 * @param {number=} opt_index
 * @return {!Vote}
 */
Votes.prototype.addNewVotes = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, Vote, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Votes} returns this
 */
Votes.prototype.clearNewVotesList = function () {
  return this.setNewVotesList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  MarketOrderDetail.prototype.toObject = function (opt_includeInstance) {
    return MarketOrderDetail.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!MarketOrderDetail} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  MarketOrderDetail.toObject = function (includeInstance, msg) {
    var obj = {
      makerorderid: msg.getMakerorderid_asB64(),
      takerorderid: msg.getTakerorderid_asB64(),
      fillsellquantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
      fillbuyquantity: jspb.Message.getFieldWithDefault(msg, 4, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!MarketOrderDetail}
 */
MarketOrderDetail.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new MarketOrderDetail();
  return MarketOrderDetail.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!MarketOrderDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!MarketOrderDetail}
 */
MarketOrderDetail.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setMakerorderid(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setTakerorderid(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setFillsellquantity(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readInt64();
        msg.setFillbuyquantity(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
MarketOrderDetail.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  MarketOrderDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!MarketOrderDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
MarketOrderDetail.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMakerorderid_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getTakerorderid_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getFillsellquantity();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getFillbuyquantity();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
};

/**
 * optional bytes makerOrderId = 1;
 * @return {!(string|Uint8Array)}
 */
MarketOrderDetail.prototype.getMakerorderid = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes makerOrderId = 1;
 * This is a type-conversion wrapper around `getMakerorderid()`
 * @return {string}
 */
MarketOrderDetail.prototype.getMakerorderid_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getMakerorderid());
};

/**
 * optional bytes makerOrderId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMakerorderid()`
 * @return {!Uint8Array}
 */
MarketOrderDetail.prototype.getMakerorderid_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getMakerorderid());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!MarketOrderDetail} returns this
 */
MarketOrderDetail.prototype.setMakerorderid = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes takerOrderId = 2;
 * @return {!(string|Uint8Array)}
 */
MarketOrderDetail.prototype.getTakerorderid = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes takerOrderId = 2;
 * This is a type-conversion wrapper around `getTakerorderid()`
 * @return {string}
 */
MarketOrderDetail.prototype.getTakerorderid_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getTakerorderid());
};

/**
 * optional bytes takerOrderId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTakerorderid()`
 * @return {!Uint8Array}
 */
MarketOrderDetail.prototype.getTakerorderid_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getTakerorderid());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!MarketOrderDetail} returns this
 */
MarketOrderDetail.prototype.setTakerorderid = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional int64 fillSellQuantity = 3;
 * @return {number}
 */
MarketOrderDetail.prototype.getFillsellquantity = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!MarketOrderDetail} returns this
 */
MarketOrderDetail.prototype.setFillsellquantity = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int64 fillBuyQuantity = 4;
 * @return {number}
 */
MarketOrderDetail.prototype.getFillbuyquantity = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!MarketOrderDetail} returns this
 */
MarketOrderDetail.prototype.setFillbuyquantity = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
Transaction.repeatedFields_ = [2, 5];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Transaction.prototype.toObject = function (opt_includeInstance) {
    return Transaction.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Transaction.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        rawData: (f = msg.getRawData()) && Transaction.raw.toObject(includeInstance, f),
        signatureList: msg.getSignatureList_asB64(),
        retList: jspb.Message.toObjectList(msg.getRetList(), Transaction.Result.toObject, includeInstance)
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Transaction}
 */
Transaction.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Transaction();
  return Transaction.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Transaction}
 */
Transaction.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new Transaction.raw();
        reader.readMessage(value, Transaction.raw.deserializeBinaryFromReader);
        msg.setRawData(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.addSignature(value);
        break;
      case 5:
        var value = new Transaction.Result();
        reader.readMessage(value, Transaction.Result.deserializeBinaryFromReader);
        msg.addRet(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Transaction.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Transaction.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRawData();
  if (f != null) {
    writer.writeMessage(1, f, Transaction.raw.serializeBinaryToWriter);
  }
  f = message.getSignatureList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(2, f);
  }
  f = message.getRetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, Transaction.Result.serializeBinaryToWriter);
  }
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Transaction.Contract.prototype.toObject = function (opt_includeInstance) {
    return Transaction.Contract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Transaction.Contract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Transaction.Contract.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        type: jspb.Message.getFieldWithDefault(msg, 1, 0),
        parameter: (f = msg.getParameter()) && any_pb$1.Any.toObject(includeInstance, f),
        provider: msg.getProvider_asB64(),
        contractname: msg.getContractname_asB64(),
        permissionId: jspb.Message.getFieldWithDefault(msg, 5, 0)
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Transaction.Contract}
 */
Transaction.Contract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Transaction.Contract();
  return Transaction.Contract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Transaction.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Transaction.Contract}
 */
Transaction.Contract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Transaction.Contract.ContractType} */reader.readEnum();
        msg.setType(value);
        break;
      case 2:
        var value = new any_pb$1.Any();
        reader.readMessage(value, any_pb$1.Any.deserializeBinaryFromReader);
        msg.setParameter(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setProvider(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setContractname(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt32();
        msg.setPermissionId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Transaction.Contract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Transaction.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Transaction.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Transaction.Contract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getParameter();
  if (f != null) {
    writer.writeMessage(2, f, any_pb$1.Any.serializeBinaryToWriter);
  }
  f = message.getProvider_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getContractname_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getPermissionId();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
};

/**
 * @enum {number}
 */
Transaction.Contract.ContractType = {
  ACCOUNTCREATECONTRACT: 0,
  TRANSFERCONTRACT: 1,
  TRANSFERASSETCONTRACT: 2,
  VOTEASSETCONTRACT: 3,
  VOTEWITNESSCONTRACT: 4,
  WITNESSCREATECONTRACT: 5,
  ASSETISSUECONTRACT: 6,
  WITNESSUPDATECONTRACT: 8,
  PARTICIPATEASSETISSUECONTRACT: 9,
  ACCOUNTUPDATECONTRACT: 10,
  FREEZEBALANCECONTRACT: 11,
  UNFREEZEBALANCECONTRACT: 12,
  WITHDRAWBALANCECONTRACT: 13,
  UNFREEZEASSETCONTRACT: 14,
  UPDATEASSETCONTRACT: 15,
  PROPOSALCREATECONTRACT: 16,
  PROPOSALAPPROVECONTRACT: 17,
  PROPOSALDELETECONTRACT: 18,
  SETACCOUNTIDCONTRACT: 19,
  CUSTOMCONTRACT: 20,
  CREATESMARTCONTRACT: 30,
  TRIGGERSMARTCONTRACT: 31,
  GETCONTRACT: 32,
  UPDATESETTINGCONTRACT: 33,
  EXCHANGECREATECONTRACT: 41,
  EXCHANGEINJECTCONTRACT: 42,
  EXCHANGEWITHDRAWCONTRACT: 43,
  EXCHANGETRANSACTIONCONTRACT: 44,
  UPDATEENERGYLIMITCONTRACT: 45,
  ACCOUNTPERMISSIONUPDATECONTRACT: 46,
  CLEARABICONTRACT: 48,
  UPDATEBROKERAGECONTRACT: 49,
  SHIELDEDTRANSFERCONTRACT: 51,
  MARKETSELLASSETCONTRACT: 52,
  MARKETCANCELORDERCONTRACT: 53
};

/**
 * optional ContractType type = 1;
 * @return {!Transaction.Contract.ContractType}
 */
Transaction.Contract.prototype.getType = function () {
  return /** @type {!Transaction.Contract.ContractType} */jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {!Transaction.Contract.ContractType} value
 * @return {!Transaction.Contract} returns this
 */
Transaction.Contract.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional google.protobuf.Any parameter = 2;
 * @return {?proto.google.protobuf.Any}
 */
Transaction.Contract.prototype.getParameter = function () {
  return /** @type{?proto.google.protobuf.Any} */(
    jspb.Message.getWrapperField(this, any_pb$1.Any, 2)
  );
};

/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!Transaction.Contract} returns this
*/
Transaction.Contract.prototype.setParameter = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!Transaction.Contract} returns this
 */
Transaction.Contract.prototype.clearParameter = function () {
  return this.setParameter(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
Transaction.Contract.prototype.hasParameter = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional bytes provider = 3;
 * @return {!(string|Uint8Array)}
 */
Transaction.Contract.prototype.getProvider = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 3, "");
};

/**
 * optional bytes provider = 3;
 * This is a type-conversion wrapper around `getProvider()`
 * @return {string}
 */
Transaction.Contract.prototype.getProvider_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getProvider());
};

/**
 * optional bytes provider = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProvider()`
 * @return {!Uint8Array}
 */
Transaction.Contract.prototype.getProvider_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getProvider());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Transaction.Contract} returns this
 */
Transaction.Contract.prototype.setProvider = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes ContractName = 4;
 * @return {!(string|Uint8Array)}
 */
Transaction.Contract.prototype.getContractname = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "");
};

/**
 * optional bytes ContractName = 4;
 * This is a type-conversion wrapper around `getContractname()`
 * @return {string}
 */
Transaction.Contract.prototype.getContractname_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getContractname());
};

/**
 * optional bytes ContractName = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractname()`
 * @return {!Uint8Array}
 */
Transaction.Contract.prototype.getContractname_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getContractname());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Transaction.Contract} returns this
 */
Transaction.Contract.prototype.setContractname = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional int32 Permission_id = 5;
 * @return {number}
 */
Transaction.Contract.prototype.getPermissionId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Contract} returns this
 */
Transaction.Contract.prototype.setPermissionId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
Transaction.Result.repeatedFields_ = [26];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Transaction.Result.prototype.toObject = function (opt_includeInstance) {
    return Transaction.Result.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Transaction.Result} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Transaction.Result.toObject = function (includeInstance, msg) {
    var obj = {
      fee: jspb.Message.getFieldWithDefault(msg, 1, 0),
      ret: jspb.Message.getFieldWithDefault(msg, 2, 0),
      contractret: jspb.Message.getFieldWithDefault(msg, 3, 0),
      assetissueid: jspb.Message.getFieldWithDefault(msg, 14, ""),
      withdrawAmount: jspb.Message.getFieldWithDefault(msg, 15, 0),
      unfreezeAmount: jspb.Message.getFieldWithDefault(msg, 16, 0),
      exchangeReceivedAmount: jspb.Message.getFieldWithDefault(msg, 18, 0),
      exchangeInjectAnotherAmount: jspb.Message.getFieldWithDefault(msg, 19, 0),
      exchangeWithdrawAnotherAmount: jspb.Message.getFieldWithDefault(msg, 20, 0),
      exchangeId: jspb.Message.getFieldWithDefault(msg, 21, 0),
      shieldedTransactionFee: jspb.Message.getFieldWithDefault(msg, 22, 0),
      orderid: msg.getOrderid_asB64(),
      orderdetailsList: jspb.Message.toObjectList(msg.getOrderdetailsList(), MarketOrderDetail.toObject, includeInstance)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Transaction.Result}
 */
Transaction.Result.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Transaction.Result();
  return Transaction.Result.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Transaction.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Transaction.Result}
 */
Transaction.Result.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readInt64();
        msg.setFee(value);
        break;
      case 2:
        var value = /** @type {!Transaction.Result.code} */reader.readEnum();
        msg.setRet(value);
        break;
      case 3:
        var value = /** @type {!Transaction.Result.contractResult} */reader.readEnum();
        msg.setContractret(value);
        break;
      case 14:
        var value = /** @type {string} */reader.readString();
        msg.setAssetissueid(value);
        break;
      case 15:
        var value = /** @type {number} */reader.readInt64();
        msg.setWithdrawAmount(value);
        break;
      case 16:
        var value = /** @type {number} */reader.readInt64();
        msg.setUnfreezeAmount(value);
        break;
      case 18:
        var value = /** @type {number} */reader.readInt64();
        msg.setExchangeReceivedAmount(value);
        break;
      case 19:
        var value = /** @type {number} */reader.readInt64();
        msg.setExchangeInjectAnotherAmount(value);
        break;
      case 20:
        var value = /** @type {number} */reader.readInt64();
        msg.setExchangeWithdrawAnotherAmount(value);
        break;
      case 21:
        var value = /** @type {number} */reader.readInt64();
        msg.setExchangeId(value);
        break;
      case 22:
        var value = /** @type {number} */reader.readInt64();
        msg.setShieldedTransactionFee(value);
        break;
      case 25:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOrderid(value);
        break;
      case 26:
        var value = new MarketOrderDetail();
        reader.readMessage(value, MarketOrderDetail.deserializeBinaryFromReader);
        msg.addOrderdetails(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Transaction.Result.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Transaction.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Transaction.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Transaction.Result.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(1, f);
  }
  f = message.getRet();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = message.getContractret();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
  f = message.getAssetissueid();
  if (f.length > 0) {
    writer.writeString(14, f);
  }
  f = message.getWithdrawAmount();
  if (f !== 0) {
    writer.writeInt64(15, f);
  }
  f = message.getUnfreezeAmount();
  if (f !== 0) {
    writer.writeInt64(16, f);
  }
  f = message.getExchangeReceivedAmount();
  if (f !== 0) {
    writer.writeInt64(18, f);
  }
  f = message.getExchangeInjectAnotherAmount();
  if (f !== 0) {
    writer.writeInt64(19, f);
  }
  f = message.getExchangeWithdrawAnotherAmount();
  if (f !== 0) {
    writer.writeInt64(20, f);
  }
  f = message.getExchangeId();
  if (f !== 0) {
    writer.writeInt64(21, f);
  }
  f = message.getShieldedTransactionFee();
  if (f !== 0) {
    writer.writeInt64(22, f);
  }
  f = message.getOrderid_asU8();
  if (f.length > 0) {
    writer.writeBytes(25, f);
  }
  f = message.getOrderdetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(26, f, MarketOrderDetail.serializeBinaryToWriter);
  }
};

/**
 * @enum {number}
 */
Transaction.Result.code = {
  SUCESS: 0,
  FAILED: 1
};

/**
 * @enum {number}
 */
Transaction.Result.contractResult = {
  DEFAULT: 0,
  SUCCESS: 1,
  REVERT: 2,
  BAD_JUMP_DESTINATION: 3,
  OUT_OF_MEMORY: 4,
  PRECOMPILED_CONTRACT: 5,
  STACK_TOO_SMALL: 6,
  STACK_TOO_LARGE: 7,
  ILLEGAL_OPERATION: 8,
  STACK_OVERFLOW: 9,
  OUT_OF_ENERGY: 10,
  OUT_OF_TIME: 11,
  JVM_STACK_OVER_FLOW: 12,
  UNKNOWN: 13,
  TRANSFER_FAILED: 14,
  INVALID_CODE: 15
};

/**
 * optional int64 fee = 1;
 * @return {number}
 */
Transaction.Result.prototype.getFee = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 1, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setFee = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional code ret = 2;
 * @return {!Transaction.Result.code}
 */
Transaction.Result.prototype.getRet = function () {
  return /** @type {!Transaction.Result.code} */jspb.Message.getFieldWithDefault(this, 2, 0);
};

/**
 * @param {!Transaction.Result.code} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setRet = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional contractResult contractRet = 3;
 * @return {!Transaction.Result.contractResult}
 */
Transaction.Result.prototype.getContractret = function () {
  return /** @type {!Transaction.Result.contractResult} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {!Transaction.Result.contractResult} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setContractret = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

/**
 * optional string assetIssueID = 14;
 * @return {string}
 */
Transaction.Result.prototype.getAssetissueid = function () {
  return /** @type {string} */jspb.Message.getFieldWithDefault(this, 14, "");
};

/**
 * @param {string} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setAssetissueid = function (value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};

/**
 * optional int64 withdraw_amount = 15;
 * @return {number}
 */
Transaction.Result.prototype.getWithdrawAmount = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 15, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setWithdrawAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};

/**
 * optional int64 unfreeze_amount = 16;
 * @return {number}
 */
Transaction.Result.prototype.getUnfreezeAmount = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 16, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setUnfreezeAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};

/**
 * optional int64 exchange_received_amount = 18;
 * @return {number}
 */
Transaction.Result.prototype.getExchangeReceivedAmount = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 18, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setExchangeReceivedAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};

/**
 * optional int64 exchange_inject_another_amount = 19;
 * @return {number}
 */
Transaction.Result.prototype.getExchangeInjectAnotherAmount = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 19, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setExchangeInjectAnotherAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};

/**
 * optional int64 exchange_withdraw_another_amount = 20;
 * @return {number}
 */
Transaction.Result.prototype.getExchangeWithdrawAnotherAmount = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 20, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setExchangeWithdrawAnotherAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};

/**
 * optional int64 exchange_id = 21;
 * @return {number}
 */
Transaction.Result.prototype.getExchangeId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 21, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setExchangeId = function (value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};

/**
 * optional int64 shielded_transaction_fee = 22;
 * @return {number}
 */
Transaction.Result.prototype.getShieldedTransactionFee = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 22, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setShieldedTransactionFee = function (value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};

/**
 * optional bytes orderId = 25;
 * @return {!(string|Uint8Array)}
 */
Transaction.Result.prototype.getOrderid = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 25, "");
};

/**
 * optional bytes orderId = 25;
 * This is a type-conversion wrapper around `getOrderid()`
 * @return {string}
 */
Transaction.Result.prototype.getOrderid_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOrderid());
};

/**
 * optional bytes orderId = 25;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderid()`
 * @return {!Uint8Array}
 */
Transaction.Result.prototype.getOrderid_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOrderid());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.setOrderid = function (value) {
  return jspb.Message.setProto3BytesField(this, 25, value);
};

/**
 * repeated MarketOrderDetail orderDetails = 26;
 * @return {!Array<!MarketOrderDetail>}
 */
Transaction.Result.prototype.getOrderdetailsList = function () {
  return /** @type{!Array<!MarketOrderDetail>} */(
    jspb.Message.getRepeatedWrapperField(this, MarketOrderDetail, 26)
  );
};

/**
 * @param {!Array<!MarketOrderDetail>} value
 * @return {!Transaction.Result} returns this
*/
Transaction.Result.prototype.setOrderdetailsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 26, value);
};

/**
 * @param {!export const MarketOrderDetail =} opt_value
 * @param {number=} opt_index
 * @return {!MarketOrderDetail}
 */
Transaction.Result.prototype.addOrderdetails = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 26, opt_value, MarketOrderDetail, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Transaction.Result} returns this
 */
Transaction.Result.prototype.clearOrderdetailsList = function () {
  return this.setOrderdetailsList([]);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
Transaction.raw.repeatedFields_ = [9, 11];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  Transaction.raw.prototype.toObject = function (opt_includeInstance) {
    return Transaction.raw.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!Transaction.raw} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  Transaction.raw.toObject = function (includeInstance, msg) {
    var obj = {
      refBlockBytes: msg.getRefBlockBytes_asB64(),
      refBlockNum: jspb.Message.getFieldWithDefault(msg, 3, 0),
      refBlockHash: msg.getRefBlockHash_asB64(),
      expiration: jspb.Message.getFieldWithDefault(msg, 8, 0),
      authsList: jspb.Message.toObjectList(msg.getAuthsList(), authority.toObject, includeInstance),
      data: msg.getData_asB64(),
      contractList: jspb.Message.toObjectList(msg.getContractList(), Transaction.Contract.toObject, includeInstance),
      scripts: msg.getScripts_asB64(),
      timestamp: jspb.Message.getFieldWithDefault(msg, 14, 0),
      feeLimit: jspb.Message.getFieldWithDefault(msg, 18, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!Transaction.raw}
 */
Transaction.raw.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new Transaction.raw();
  return Transaction.raw.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!Transaction.raw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!Transaction.raw}
 */
Transaction.raw.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setRefBlockBytes(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setRefBlockNum(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setRefBlockHash(value);
        break;
      case 8:
        var value = /** @type {number} */reader.readInt64();
        msg.setExpiration(value);
        break;
      case 9:
        var value = new authority();
        reader.readMessage(value, authority.deserializeBinaryFromReader);
        msg.addAuths(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setData(value);
        break;
      case 11:
        var value = new Transaction.Contract();
        reader.readMessage(value, Transaction.Contract.deserializeBinaryFromReader);
        msg.addContract(value);
        break;
      case 12:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setScripts(value);
        break;
      case 14:
        var value = /** @type {number} */reader.readInt64();
        msg.setTimestamp(value);
        break;
      case 18:
        var value = /** @type {number} */reader.readInt64();
        msg.setFeeLimit(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
Transaction.raw.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  Transaction.raw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!Transaction.raw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
Transaction.raw.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRefBlockBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getRefBlockNum();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getRefBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = message.getAuthsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(9, f, authority.serializeBinaryToWriter);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
  f = message.getContractList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(11, f, Transaction.Contract.serializeBinaryToWriter);
  }
  f = message.getScripts_asU8();
  if (f.length > 0) {
    writer.writeBytes(12, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(14, f);
  }
  f = message.getFeeLimit();
  if (f !== 0) {
    writer.writeInt64(18, f);
  }
};

/**
 * optional bytes ref_block_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
Transaction.raw.prototype.getRefBlockBytes = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes ref_block_bytes = 1;
 * This is a type-conversion wrapper around `getRefBlockBytes()`
 * @return {string}
 */
Transaction.raw.prototype.getRefBlockBytes_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getRefBlockBytes());
};

/**
 * optional bytes ref_block_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRefBlockBytes()`
 * @return {!Uint8Array}
 */
Transaction.raw.prototype.getRefBlockBytes_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getRefBlockBytes());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setRefBlockBytes = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional int64 ref_block_num = 3;
 * @return {number}
 */
Transaction.raw.prototype.getRefBlockNum = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setRefBlockNum = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes ref_block_hash = 4;
 * @return {!(string|Uint8Array)}
 */
Transaction.raw.prototype.getRefBlockHash = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "");
};

/**
 * optional bytes ref_block_hash = 4;
 * This is a type-conversion wrapper around `getRefBlockHash()`
 * @return {string}
 */
Transaction.raw.prototype.getRefBlockHash_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getRefBlockHash());
};

/**
 * optional bytes ref_block_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRefBlockHash()`
 * @return {!Uint8Array}
 */
Transaction.raw.prototype.getRefBlockHash_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getRefBlockHash());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setRefBlockHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional int64 expiration = 8;
 * @return {number}
 */
Transaction.raw.prototype.getExpiration = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 8, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setExpiration = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * repeated authority auths = 9;
 * @return {!Array<!authority>}
 */
Transaction.raw.prototype.getAuthsList = function () {
  return /** @type{!Array<!authority>} */(
    jspb.Message.getRepeatedWrapperField(this, authority, 9)
  );
};

/**
 * @param {!Array<!authority>} value
 * @return {!Transaction.raw} returns this
*/
Transaction.raw.prototype.setAuthsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};

/**
 * @param {!export const authority =} opt_value
 * @param {number=} opt_index
 * @return {!authority}
 */
Transaction.raw.prototype.addAuths = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, authority, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.clearAuthsList = function () {
  return this.setAuthsList([]);
};

/**
 * optional bytes data = 10;
 * @return {!(string|Uint8Array)}
 */
Transaction.raw.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 10, "");
};

/**
 * optional bytes data = 10;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
Transaction.raw.prototype.getData_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getData());
};

/**
 * optional bytes data = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
Transaction.raw.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};

/**
 * repeated Contract contract = 11;
 * @return {!Array<!Transaction.Contract>}
 */
Transaction.raw.prototype.getContractList = function () {
  return /** @type{!Array<!Transaction.Contract>} */(
    jspb.Message.getRepeatedWrapperField(this, Transaction.Contract, 11)
  );
};

/**
 * @param {!Array<!Transaction.Contract>} value
 * @return {!Transaction.raw} returns this
*/
Transaction.raw.prototype.setContractList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};

/**
 * @param {!Transaction.Contract=} opt_value
 * @param {number=} opt_index
 * @return {!Transaction.Contract}
 */
Transaction.raw.prototype.addContract = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, Transaction.Contract, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.clearContractList = function () {
  return this.setContractList([]);
};

/**
 * optional bytes scripts = 12;
 * @return {!(string|Uint8Array)}
 */
Transaction.raw.prototype.getScripts = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 12, "");
};

/**
 * optional bytes scripts = 12;
 * This is a type-conversion wrapper around `getScripts()`
 * @return {string}
 */
Transaction.raw.prototype.getScripts_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getScripts());
};

/**
 * optional bytes scripts = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScripts()`
 * @return {!Uint8Array}
 */
Transaction.raw.prototype.getScripts_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getScripts());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setScripts = function (value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};

/**
 * optional int64 timestamp = 14;
 * @return {number}
 */
Transaction.raw.prototype.getTimestamp = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 14, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setTimestamp = function (value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};

/**
 * optional int64 fee_limit = 18;
 * @return {number}
 */
Transaction.raw.prototype.getFeeLimit = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 18, 0);
};

/**
 * @param {number} value
 * @return {!Transaction.raw} returns this
 */
Transaction.raw.prototype.setFeeLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};

/**
 * optional raw raw_data = 1;
 * @return {?Transaction.raw}
 */
Transaction.prototype.getRawData = function () {
  return /** @type{?Transaction.raw} */(
    jspb.Message.getWrapperField(this, Transaction.raw, 1)
  );
};

/**
 * @param {?Transaction.raw|undefined} value
 * @return {!Transaction} returns this
*/
Transaction.prototype.setRawData = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!Transaction} returns this
 */
Transaction.prototype.clearRawData = function () {
  return this.setRawData(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
Transaction.prototype.hasRawData = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated bytes signature = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
Transaction.prototype.getSignatureList = function () {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */jspb.Message.getRepeatedField(this, 2);
};

/**
 * repeated bytes signature = 2;
 * This is a type-conversion wrapper around `getSignatureList()`
 * @return {!Array<string>}
 */
Transaction.prototype.getSignatureList_asB64 = function () {
  return /** @type {!Array<string>} */jspb.Message.bytesListAsB64(this.getSignatureList());
};

/**
 * repeated bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureList()`
 * @return {!Array<!Uint8Array>}
 */
Transaction.prototype.getSignatureList_asU8 = function () {
  return /** @type {!Array<!Uint8Array>} */jspb.Message.bytesListAsU8(this.getSignatureList());
};

/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!Transaction} returns this
 */
Transaction.prototype.setSignatureList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!Transaction} returns this
 */
Transaction.prototype.addSignature = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Transaction} returns this
 */
Transaction.prototype.clearSignatureList = function () {
  return this.setSignatureList([]);
};

/**
 * repeated Result ret = 5;
 * @return {!Array<!Transaction.Result>}
 */
Transaction.prototype.getRetList = function () {
  return /** @type{!Array<!Transaction.Result>} */(
    jspb.Message.getRepeatedWrapperField(this, Transaction.Result, 5)
  );
};

/**
 * @param {!Array<!Transaction.Result>} value
 * @return {!Transaction} returns this
*/
Transaction.prototype.setRetList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!Transaction.Result=} opt_value
 * @param {number=} opt_index
 * @return {!Transaction.Result}
 */
Transaction.prototype.addRet = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, Transaction.Result, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!Transaction} returns this
 */
Transaction.prototype.clearRetList = function () {
  return this.setRetList([]);
};

/**
 * @enum {number}
 */
const AccountType = {
  NORMAL: 0,
  ASSETISSUE: 1,
  CONTRACT: 2
};
export { Account, AccountId, AccountType, DelegatedResource, Exchange, Key, MarketOrderDetail, Permission, Proposal, Transaction, Vote, Votes, Witness, authority };
