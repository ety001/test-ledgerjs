/* Generated by rollup. Don't edit it. */
// @ts-nocheck
import * as jspb from '@tronweb3/google-protobuf';

// source: core/contract/smart_contract.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var goog = jspb;
var global = function () {
  return this || window || global || self || Function('return this')();
}.call(null);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const SmartContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(SmartContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  SmartContract.displayName = 'SmartContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
SmartContract.ABI = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, SmartContract.ABI.repeatedFields_, null);
};
goog.inherits(SmartContract.ABI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  SmartContract.ABI.displayName = 'SmartContract.ABI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
SmartContract.ABI.Entry = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, SmartContract.ABI.Entry.repeatedFields_, null);
};
goog.inherits(SmartContract.ABI.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  SmartContract.ABI.Entry.displayName = 'SmartContract.ABI.Entry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
SmartContract.ABI.Entry.Param = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(SmartContract.ABI.Entry.Param, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  SmartContract.ABI.Entry.Param.displayName = 'SmartContract.ABI.Entry.Param';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const CreateSmartContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(CreateSmartContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  CreateSmartContract.displayName = 'CreateSmartContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const TriggerSmartContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(TriggerSmartContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  TriggerSmartContract.displayName = 'TriggerSmartContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const ClearABIContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(ClearABIContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  ClearABIContract.displayName = 'ClearABIContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const UpdateSettingContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(UpdateSettingContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  UpdateSettingContract.displayName = 'UpdateSettingContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const UpdateEnergyLimitContract = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(UpdateEnergyLimitContract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  UpdateEnergyLimitContract.displayName = 'UpdateEnergyLimitContract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
const SmartContractDataWrapper = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(SmartContractDataWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  SmartContractDataWrapper.displayName = 'SmartContractDataWrapper';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  SmartContract.prototype.toObject = function (opt_includeInstance) {
    return SmartContract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!SmartContract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  SmartContract.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        originAddress: msg.getOriginAddress_asB64(),
        contractAddress: msg.getContractAddress_asB64(),
        abi: (f = msg.getAbi()) && SmartContract.ABI.toObject(includeInstance, f),
        bytecode: msg.getBytecode_asB64(),
        callValue: jspb.Message.getFieldWithDefault(msg, 5, 0),
        consumeUserResourcePercent: jspb.Message.getFieldWithDefault(msg, 6, 0),
        name: jspb.Message.getFieldWithDefault(msg, 7, ""),
        originEnergyLimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
        codeHash: msg.getCodeHash_asB64(),
        trxHash: msg.getTrxHash_asB64()
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!SmartContract}
 */
SmartContract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new SmartContract();
  return SmartContract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!SmartContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!SmartContract}
 */
SmartContract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOriginAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setContractAddress(value);
        break;
      case 3:
        var value = new SmartContract.ABI();
        reader.readMessage(value, SmartContract.ABI.deserializeBinaryFromReader);
        msg.setAbi(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setBytecode(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt64();
        msg.setCallValue(value);
        break;
      case 6:
        var value = /** @type {number} */reader.readInt64();
        msg.setConsumeUserResourcePercent(value);
        break;
      case 7:
        var value = /** @type {string} */reader.readString();
        msg.setName(value);
        break;
      case 8:
        var value = /** @type {number} */reader.readInt64();
        msg.setOriginEnergyLimit(value);
        break;
      case 9:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setCodeHash(value);
        break;
      case 10:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setTrxHash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
SmartContract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  SmartContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!SmartContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
SmartContract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOriginAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getAbi();
  if (f != null) {
    writer.writeMessage(3, f, SmartContract.ABI.serializeBinaryToWriter);
  }
  f = message.getBytecode_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getCallValue();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getConsumeUserResourcePercent();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getOriginEnergyLimit();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = message.getCodeHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(9, f);
  }
  f = message.getTrxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(10, f);
  }
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
SmartContract.ABI.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  SmartContract.ABI.prototype.toObject = function (opt_includeInstance) {
    return SmartContract.ABI.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!SmartContract.ABI} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  SmartContract.ABI.toObject = function (includeInstance, msg) {
    var obj = {
      entrysList: jspb.Message.toObjectList(msg.getEntrysList(), SmartContract.ABI.Entry.toObject, includeInstance)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!SmartContract.ABI}
 */
SmartContract.ABI.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new SmartContract.ABI();
  return SmartContract.ABI.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!SmartContract.ABI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!SmartContract.ABI}
 */
SmartContract.ABI.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new SmartContract.ABI.Entry();
        reader.readMessage(value, SmartContract.ABI.Entry.deserializeBinaryFromReader);
        msg.addEntrys(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
SmartContract.ABI.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  SmartContract.ABI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!SmartContract.ABI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
SmartContract.ABI.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEntrysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, SmartContract.ABI.Entry.serializeBinaryToWriter);
  }
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
SmartContract.ABI.Entry.repeatedFields_ = [4, 5];
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  SmartContract.ABI.Entry.prototype.toObject = function (opt_includeInstance) {
    return SmartContract.ABI.Entry.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!SmartContract.ABI.Entry} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  SmartContract.ABI.Entry.toObject = function (includeInstance, msg) {
    var obj = {
      anonymous: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
      constant: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
      name: jspb.Message.getFieldWithDefault(msg, 3, ""),
      inputsList: jspb.Message.toObjectList(msg.getInputsList(), SmartContract.ABI.Entry.Param.toObject, includeInstance),
      outputsList: jspb.Message.toObjectList(msg.getOutputsList(), SmartContract.ABI.Entry.Param.toObject, includeInstance),
      type: jspb.Message.getFieldWithDefault(msg, 6, 0),
      payable: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
      statemutability: jspb.Message.getFieldWithDefault(msg, 8, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!SmartContract.ABI.Entry}
 */
SmartContract.ABI.Entry.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new SmartContract.ABI.Entry();
  return SmartContract.ABI.Entry.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!SmartContract.ABI.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!SmartContract.ABI.Entry}
 */
SmartContract.ABI.Entry.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */reader.readBool();
        msg.setAnonymous(value);
        break;
      case 2:
        var value = /** @type {boolean} */reader.readBool();
        msg.setConstant(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setName(value);
        break;
      case 4:
        var value = new SmartContract.ABI.Entry.Param();
        reader.readMessage(value, SmartContract.ABI.Entry.Param.deserializeBinaryFromReader);
        msg.addInputs(value);
        break;
      case 5:
        var value = new SmartContract.ABI.Entry.Param();
        reader.readMessage(value, SmartContract.ABI.Entry.Param.deserializeBinaryFromReader);
        msg.addOutputs(value);
        break;
      case 6:
        var value = /** @type {!SmartContract.ABI.Entry.EntryType} */reader.readEnum();
        msg.setType(value);
        break;
      case 7:
        var value = /** @type {boolean} */reader.readBool();
        msg.setPayable(value);
        break;
      case 8:
        var value = /** @type {!SmartContract.ABI.Entry.StateMutabilityType} */reader.readEnum();
        msg.setStatemutability(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
SmartContract.ABI.Entry.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  SmartContract.ABI.Entry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!SmartContract.ABI.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
SmartContract.ABI.Entry.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAnonymous();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getConstant();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(4, f, SmartContract.ABI.Entry.Param.serializeBinaryToWriter);
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(5, f, SmartContract.ABI.Entry.Param.serializeBinaryToWriter);
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(6, f);
  }
  f = message.getPayable();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getStatemutability();
  if (f !== 0.0) {
    writer.writeEnum(8, f);
  }
};

/**
 * @enum {number}
 */
SmartContract.ABI.Entry.EntryType = {
  UNKNOWNENTRYTYPE: 0,
  CONSTRUCTOR: 1,
  FUNCTION: 2,
  EVENT: 3,
  FALLBACK: 4,
  RECEIVE: 5,
  ERROR: 6
};

/**
 * @enum {number}
 */
SmartContract.ABI.Entry.StateMutabilityType = {
  UNKNOWNMUTABILITYTYPE: 0,
  PURE: 1,
  VIEW: 2,
  NONPAYABLE: 3,
  PAYABLE: 4
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  SmartContract.ABI.Entry.Param.prototype.toObject = function (opt_includeInstance) {
    return SmartContract.ABI.Entry.Param.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!SmartContract.ABI.Entry.Param} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  SmartContract.ABI.Entry.Param.toObject = function (includeInstance, msg) {
    var obj = {
      indexed: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
      name: jspb.Message.getFieldWithDefault(msg, 2, ""),
      type: jspb.Message.getFieldWithDefault(msg, 3, "")
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!SmartContract.ABI.Entry.Param}
 */
SmartContract.ABI.Entry.Param.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new SmartContract.ABI.Entry.Param();
  return SmartContract.ABI.Entry.Param.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!SmartContract.ABI.Entry.Param} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!SmartContract.ABI.Entry.Param}
 */
SmartContract.ABI.Entry.Param.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */reader.readBool();
        msg.setIndexed(value);
        break;
      case 2:
        var value = /** @type {string} */reader.readString();
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {string} */reader.readString();
        msg.setType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
SmartContract.ABI.Entry.Param.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  SmartContract.ABI.Entry.Param.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!SmartContract.ABI.Entry.Param} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
SmartContract.ABI.Entry.Param.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getIndexed();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool indexed = 1;
 * @return {boolean}
 */
SmartContract.ABI.Entry.Param.prototype.getIndexed = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 1, false);
};

/**
 * @param {boolean} value
 * @return {!SmartContract.ABI.Entry.Param} returns this
 */
SmartContract.ABI.Entry.Param.prototype.setIndexed = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
SmartContract.ABI.Entry.Param.prototype.getName = function () {
  return /** @type {string} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * @param {string} value
 * @return {!SmartContract.ABI.Entry.Param} returns this
 */
SmartContract.ABI.Entry.Param.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string type = 3;
 * @return {string}
 */
SmartContract.ABI.Entry.Param.prototype.getType = function () {
  return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
};

/**
 * @param {string} value
 * @return {!SmartContract.ABI.Entry.Param} returns this
 */
SmartContract.ABI.Entry.Param.prototype.setType = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bool anonymous = 1;
 * @return {boolean}
 */
SmartContract.ABI.Entry.prototype.getAnonymous = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 1, false);
};

/**
 * @param {boolean} value
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.setAnonymous = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional bool constant = 2;
 * @return {boolean}
 */
SmartContract.ABI.Entry.prototype.getConstant = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 2, false);
};

/**
 * @param {boolean} value
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.setConstant = function (value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional string name = 3;
 * @return {string}
 */
SmartContract.ABI.Entry.prototype.getName = function () {
  return /** @type {string} */jspb.Message.getFieldWithDefault(this, 3, "");
};

/**
 * @param {string} value
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * repeated Param inputs = 4;
 * @return {!Array<!SmartContract.ABI.Entry.Param>}
 */
SmartContract.ABI.Entry.prototype.getInputsList = function () {
  return /** @type{!Array<!SmartContract.ABI.Entry.Param>} */(
    jspb.Message.getRepeatedWrapperField(this, SmartContract.ABI.Entry.Param, 4)
  );
};

/**
 * @param {!Array<!SmartContract.ABI.Entry.Param>} value
 * @return {!SmartContract.ABI.Entry} returns this
*/
SmartContract.ABI.Entry.prototype.setInputsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!SmartContract.ABI.Entry.Param=} opt_value
 * @param {number=} opt_index
 * @return {!SmartContract.ABI.Entry.Param}
 */
SmartContract.ABI.Entry.prototype.addInputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, SmartContract.ABI.Entry.Param, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.clearInputsList = function () {
  return this.setInputsList([]);
};

/**
 * repeated Param outputs = 5;
 * @return {!Array<!SmartContract.ABI.Entry.Param>}
 */
SmartContract.ABI.Entry.prototype.getOutputsList = function () {
  return /** @type{!Array<!SmartContract.ABI.Entry.Param>} */(
    jspb.Message.getRepeatedWrapperField(this, SmartContract.ABI.Entry.Param, 5)
  );
};

/**
 * @param {!Array<!SmartContract.ABI.Entry.Param>} value
 * @return {!SmartContract.ABI.Entry} returns this
*/
SmartContract.ABI.Entry.prototype.setOutputsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!SmartContract.ABI.Entry.Param=} opt_value
 * @param {number=} opt_index
 * @return {!SmartContract.ABI.Entry.Param}
 */
SmartContract.ABI.Entry.prototype.addOutputs = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, SmartContract.ABI.Entry.Param, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.clearOutputsList = function () {
  return this.setOutputsList([]);
};

/**
 * optional EntryType type = 6;
 * @return {!SmartContract.ABI.Entry.EntryType}
 */
SmartContract.ABI.Entry.prototype.getType = function () {
  return /** @type {!SmartContract.ABI.Entry.EntryType} */jspb.Message.getFieldWithDefault(this, 6, 0);
};

/**
 * @param {!SmartContract.ABI.Entry.EntryType} value
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.setType = function (value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};

/**
 * optional bool payable = 7;
 * @return {boolean}
 */
SmartContract.ABI.Entry.prototype.getPayable = function () {
  return /** @type {boolean} */jspb.Message.getBooleanFieldWithDefault(this, 7, false);
};

/**
 * @param {boolean} value
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.setPayable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional StateMutabilityType stateMutability = 8;
 * @return {!SmartContract.ABI.Entry.StateMutabilityType}
 */
SmartContract.ABI.Entry.prototype.getStatemutability = function () {
  return /** @type {!SmartContract.ABI.Entry.StateMutabilityType} */jspb.Message.getFieldWithDefault(this, 8, 0);
};

/**
 * @param {!SmartContract.ABI.Entry.StateMutabilityType} value
 * @return {!SmartContract.ABI.Entry} returns this
 */
SmartContract.ABI.Entry.prototype.setStatemutability = function (value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};

/**
 * repeated Entry entrys = 1;
 * @return {!Array<!SmartContract.ABI.Entry>}
 */
SmartContract.ABI.prototype.getEntrysList = function () {
  return /** @type{!Array<!SmartContract.ABI.Entry>} */(
    jspb.Message.getRepeatedWrapperField(this, SmartContract.ABI.Entry, 1)
  );
};

/**
 * @param {!Array<!SmartContract.ABI.Entry>} value
 * @return {!SmartContract.ABI} returns this
*/
SmartContract.ABI.prototype.setEntrysList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!SmartContract.ABI.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!SmartContract.ABI.Entry}
 */
SmartContract.ABI.prototype.addEntrys = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, SmartContract.ABI.Entry, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!SmartContract.ABI} returns this
 */
SmartContract.ABI.prototype.clearEntrysList = function () {
  return this.setEntrysList([]);
};

/**
 * optional bytes origin_address = 1;
 * @return {!(string|Uint8Array)}
 */
SmartContract.prototype.getOriginAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes origin_address = 1;
 * This is a type-conversion wrapper around `getOriginAddress()`
 * @return {string}
 */
SmartContract.prototype.getOriginAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOriginAddress());
};

/**
 * optional bytes origin_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOriginAddress()`
 * @return {!Uint8Array}
 */
SmartContract.prototype.getOriginAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOriginAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setOriginAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes contract_address = 2;
 * @return {!(string|Uint8Array)}
 */
SmartContract.prototype.getContractAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes contract_address = 2;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
SmartContract.prototype.getContractAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getContractAddress());
};

/**
 * optional bytes contract_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
SmartContract.prototype.getContractAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getContractAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setContractAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional ABI abi = 3;
 * @return {?SmartContract.ABI}
 */
SmartContract.prototype.getAbi = function () {
  return /** @type{?SmartContract.ABI} */(
    jspb.Message.getWrapperField(this, SmartContract.ABI, 3)
  );
};

/**
 * @param {?SmartContract.ABI|undefined} value
 * @return {!SmartContract} returns this
*/
SmartContract.prototype.setAbi = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.clearAbi = function () {
  return this.setAbi(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
SmartContract.prototype.hasAbi = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional bytes bytecode = 4;
 * @return {!(string|Uint8Array)}
 */
SmartContract.prototype.getBytecode = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "");
};

/**
 * optional bytes bytecode = 4;
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {string}
 */
SmartContract.prototype.getBytecode_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getBytecode());
};

/**
 * optional bytes bytecode = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytecode()`
 * @return {!Uint8Array}
 */
SmartContract.prototype.getBytecode_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getBytecode());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setBytecode = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional int64 call_value = 5;
 * @return {number}
 */
SmartContract.prototype.getCallValue = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setCallValue = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 consume_user_resource_percent = 6;
 * @return {number}
 */
SmartContract.prototype.getConsumeUserResourcePercent = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0);
};

/**
 * @param {number} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setConsumeUserResourcePercent = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional string name = 7;
 * @return {string}
 */
SmartContract.prototype.getName = function () {
  return /** @type {string} */jspb.Message.getFieldWithDefault(this, 7, "");
};

/**
 * @param {string} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional int64 origin_energy_limit = 8;
 * @return {number}
 */
SmartContract.prototype.getOriginEnergyLimit = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 8, 0);
};

/**
 * @param {number} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setOriginEnergyLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional bytes code_hash = 9;
 * @return {!(string|Uint8Array)}
 */
SmartContract.prototype.getCodeHash = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 9, "");
};

/**
 * optional bytes code_hash = 9;
 * This is a type-conversion wrapper around `getCodeHash()`
 * @return {string}
 */
SmartContract.prototype.getCodeHash_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getCodeHash());
};

/**
 * optional bytes code_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodeHash()`
 * @return {!Uint8Array}
 */
SmartContract.prototype.getCodeHash_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getCodeHash());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setCodeHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};

/**
 * optional bytes trx_hash = 10;
 * @return {!(string|Uint8Array)}
 */
SmartContract.prototype.getTrxHash = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 10, "");
};

/**
 * optional bytes trx_hash = 10;
 * This is a type-conversion wrapper around `getTrxHash()`
 * @return {string}
 */
SmartContract.prototype.getTrxHash_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getTrxHash());
};

/**
 * optional bytes trx_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTrxHash()`
 * @return {!Uint8Array}
 */
SmartContract.prototype.getTrxHash_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getTrxHash());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!SmartContract} returns this
 */
SmartContract.prototype.setTrxHash = function (value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  CreateSmartContract.prototype.toObject = function (opt_includeInstance) {
    return CreateSmartContract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!CreateSmartContract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  CreateSmartContract.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ownerAddress: msg.getOwnerAddress_asB64(),
        newContract: (f = msg.getNewContract()) && SmartContract.toObject(includeInstance, f),
        callTokenValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
        tokenId: jspb.Message.getFieldWithDefault(msg, 4, 0)
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!CreateSmartContract}
 */
CreateSmartContract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new CreateSmartContract();
  return CreateSmartContract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!CreateSmartContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!CreateSmartContract}
 */
CreateSmartContract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOwnerAddress(value);
        break;
      case 2:
        var value = new SmartContract();
        reader.readMessage(value, SmartContract.deserializeBinaryFromReader);
        msg.setNewContract(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setCallTokenValue(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readInt64();
        msg.setTokenId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
CreateSmartContract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  CreateSmartContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!CreateSmartContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
CreateSmartContract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOwnerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getNewContract();
  if (f != null) {
    writer.writeMessage(2, f, SmartContract.serializeBinaryToWriter);
  }
  f = message.getCallTokenValue();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
};

/**
 * optional bytes owner_address = 1;
 * @return {!(string|Uint8Array)}
 */
CreateSmartContract.prototype.getOwnerAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes owner_address = 1;
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {string}
 */
CreateSmartContract.prototype.getOwnerAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOwnerAddress());
};

/**
 * optional bytes owner_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {!Uint8Array}
 */
CreateSmartContract.prototype.getOwnerAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOwnerAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!CreateSmartContract} returns this
 */
CreateSmartContract.prototype.setOwnerAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional SmartContract new_contract = 2;
 * @return {?SmartContract}
 */
CreateSmartContract.prototype.getNewContract = function () {
  return /** @type{?SmartContract} */(
    jspb.Message.getWrapperField(this, SmartContract, 2)
  );
};

/**
 * @param {?SmartContract|undefined} value
 * @return {!CreateSmartContract} returns this
*/
CreateSmartContract.prototype.setNewContract = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!CreateSmartContract} returns this
 */
CreateSmartContract.prototype.clearNewContract = function () {
  return this.setNewContract(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
CreateSmartContract.prototype.hasNewContract = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional int64 call_token_value = 3;
 * @return {number}
 */
CreateSmartContract.prototype.getCallTokenValue = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!CreateSmartContract} returns this
 */
CreateSmartContract.prototype.setCallTokenValue = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int64 token_id = 4;
 * @return {number}
 */
CreateSmartContract.prototype.getTokenId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 4, 0);
};

/**
 * @param {number} value
 * @return {!CreateSmartContract} returns this
 */
CreateSmartContract.prototype.setTokenId = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  TriggerSmartContract.prototype.toObject = function (opt_includeInstance) {
    return TriggerSmartContract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!TriggerSmartContract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  TriggerSmartContract.toObject = function (includeInstance, msg) {
    var obj = {
      ownerAddress: msg.getOwnerAddress_asB64(),
      contractAddress: msg.getContractAddress_asB64(),
      callValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
      data: msg.getData_asB64(),
      callTokenValue: jspb.Message.getFieldWithDefault(msg, 5, 0),
      tokenId: jspb.Message.getFieldWithDefault(msg, 6, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!TriggerSmartContract}
 */
TriggerSmartContract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new TriggerSmartContract();
  return TriggerSmartContract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!TriggerSmartContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!TriggerSmartContract}
 */
TriggerSmartContract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOwnerAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setContractAddress(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setCallValue(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setData(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readInt64();
        msg.setCallTokenValue(value);
        break;
      case 6:
        var value = /** @type {number} */reader.readInt64();
        msg.setTokenId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
TriggerSmartContract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  TriggerSmartContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!TriggerSmartContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
TriggerSmartContract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOwnerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getCallValue();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getCallTokenValue();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getTokenId();
  if (f !== 0) {
    writer.writeInt64(6, f);
  }
};

/**
 * optional bytes owner_address = 1;
 * @return {!(string|Uint8Array)}
 */
TriggerSmartContract.prototype.getOwnerAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes owner_address = 1;
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {string}
 */
TriggerSmartContract.prototype.getOwnerAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOwnerAddress());
};

/**
 * optional bytes owner_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {!Uint8Array}
 */
TriggerSmartContract.prototype.getOwnerAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOwnerAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!TriggerSmartContract} returns this
 */
TriggerSmartContract.prototype.setOwnerAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes contract_address = 2;
 * @return {!(string|Uint8Array)}
 */
TriggerSmartContract.prototype.getContractAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes contract_address = 2;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
TriggerSmartContract.prototype.getContractAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getContractAddress());
};

/**
 * optional bytes contract_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
TriggerSmartContract.prototype.getContractAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getContractAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!TriggerSmartContract} returns this
 */
TriggerSmartContract.prototype.setContractAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional int64 call_value = 3;
 * @return {number}
 */
TriggerSmartContract.prototype.getCallValue = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!TriggerSmartContract} returns this
 */
TriggerSmartContract.prototype.setCallValue = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
TriggerSmartContract.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 4, "");
};

/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
TriggerSmartContract.prototype.getData_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getData());
};

/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
TriggerSmartContract.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getData());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!TriggerSmartContract} returns this
 */
TriggerSmartContract.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional int64 call_token_value = 5;
 * @return {number}
 */
TriggerSmartContract.prototype.getCallTokenValue = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 5, 0);
};

/**
 * @param {number} value
 * @return {!TriggerSmartContract} returns this
 */
TriggerSmartContract.prototype.setCallTokenValue = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int64 token_id = 6;
 * @return {number}
 */
TriggerSmartContract.prototype.getTokenId = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 6, 0);
};

/**
 * @param {number} value
 * @return {!TriggerSmartContract} returns this
 */
TriggerSmartContract.prototype.setTokenId = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  ClearABIContract.prototype.toObject = function (opt_includeInstance) {
    return ClearABIContract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!ClearABIContract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  ClearABIContract.toObject = function (includeInstance, msg) {
    var obj = {
      ownerAddress: msg.getOwnerAddress_asB64(),
      contractAddress: msg.getContractAddress_asB64()
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!ClearABIContract}
 */
ClearABIContract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new ClearABIContract();
  return ClearABIContract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!ClearABIContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!ClearABIContract}
 */
ClearABIContract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOwnerAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setContractAddress(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
ClearABIContract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  ClearABIContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!ClearABIContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
ClearABIContract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOwnerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional bytes owner_address = 1;
 * @return {!(string|Uint8Array)}
 */
ClearABIContract.prototype.getOwnerAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes owner_address = 1;
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {string}
 */
ClearABIContract.prototype.getOwnerAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOwnerAddress());
};

/**
 * optional bytes owner_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {!Uint8Array}
 */
ClearABIContract.prototype.getOwnerAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOwnerAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!ClearABIContract} returns this
 */
ClearABIContract.prototype.setOwnerAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes contract_address = 2;
 * @return {!(string|Uint8Array)}
 */
ClearABIContract.prototype.getContractAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes contract_address = 2;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
ClearABIContract.prototype.getContractAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getContractAddress());
};

/**
 * optional bytes contract_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
ClearABIContract.prototype.getContractAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getContractAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!ClearABIContract} returns this
 */
ClearABIContract.prototype.setContractAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  UpdateSettingContract.prototype.toObject = function (opt_includeInstance) {
    return UpdateSettingContract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!UpdateSettingContract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  UpdateSettingContract.toObject = function (includeInstance, msg) {
    var obj = {
      ownerAddress: msg.getOwnerAddress_asB64(),
      contractAddress: msg.getContractAddress_asB64(),
      consumeUserResourcePercent: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!UpdateSettingContract}
 */
UpdateSettingContract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new UpdateSettingContract();
  return UpdateSettingContract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!UpdateSettingContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!UpdateSettingContract}
 */
UpdateSettingContract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOwnerAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setContractAddress(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setConsumeUserResourcePercent(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
UpdateSettingContract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  UpdateSettingContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!UpdateSettingContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
UpdateSettingContract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOwnerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getConsumeUserResourcePercent();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

/**
 * optional bytes owner_address = 1;
 * @return {!(string|Uint8Array)}
 */
UpdateSettingContract.prototype.getOwnerAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes owner_address = 1;
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {string}
 */
UpdateSettingContract.prototype.getOwnerAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOwnerAddress());
};

/**
 * optional bytes owner_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {!Uint8Array}
 */
UpdateSettingContract.prototype.getOwnerAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOwnerAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!UpdateSettingContract} returns this
 */
UpdateSettingContract.prototype.setOwnerAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes contract_address = 2;
 * @return {!(string|Uint8Array)}
 */
UpdateSettingContract.prototype.getContractAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes contract_address = 2;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
UpdateSettingContract.prototype.getContractAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getContractAddress());
};

/**
 * optional bytes contract_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
UpdateSettingContract.prototype.getContractAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getContractAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!UpdateSettingContract} returns this
 */
UpdateSettingContract.prototype.setContractAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional int64 consume_user_resource_percent = 3;
 * @return {number}
 */
UpdateSettingContract.prototype.getConsumeUserResourcePercent = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!UpdateSettingContract} returns this
 */
UpdateSettingContract.prototype.setConsumeUserResourcePercent = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  UpdateEnergyLimitContract.prototype.toObject = function (opt_includeInstance) {
    return UpdateEnergyLimitContract.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!UpdateEnergyLimitContract} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  UpdateEnergyLimitContract.toObject = function (includeInstance, msg) {
    var obj = {
      ownerAddress: msg.getOwnerAddress_asB64(),
      contractAddress: msg.getContractAddress_asB64(),
      originEnergyLimit: jspb.Message.getFieldWithDefault(msg, 3, 0)
    };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!UpdateEnergyLimitContract}
 */
UpdateEnergyLimitContract.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new UpdateEnergyLimitContract();
  return UpdateEnergyLimitContract.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!UpdateEnergyLimitContract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!UpdateEnergyLimitContract}
 */
UpdateEnergyLimitContract.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setOwnerAddress(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setContractAddress(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readInt64();
        msg.setOriginEnergyLimit(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
UpdateEnergyLimitContract.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  UpdateEnergyLimitContract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!UpdateEnergyLimitContract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
UpdateEnergyLimitContract.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOwnerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getContractAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getOriginEnergyLimit();
  if (f !== 0) {
    writer.writeInt64(3, f);
  }
};

/**
 * optional bytes owner_address = 1;
 * @return {!(string|Uint8Array)}
 */
UpdateEnergyLimitContract.prototype.getOwnerAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 1, "");
};

/**
 * optional bytes owner_address = 1;
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {string}
 */
UpdateEnergyLimitContract.prototype.getOwnerAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getOwnerAddress());
};

/**
 * optional bytes owner_address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnerAddress()`
 * @return {!Uint8Array}
 */
UpdateEnergyLimitContract.prototype.getOwnerAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getOwnerAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!UpdateEnergyLimitContract} returns this
 */
UpdateEnergyLimitContract.prototype.setOwnerAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes contract_address = 2;
 * @return {!(string|Uint8Array)}
 */
UpdateEnergyLimitContract.prototype.getContractAddress = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes contract_address = 2;
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {string}
 */
UpdateEnergyLimitContract.prototype.getContractAddress_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getContractAddress());
};

/**
 * optional bytes contract_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractAddress()`
 * @return {!Uint8Array}
 */
UpdateEnergyLimitContract.prototype.getContractAddress_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getContractAddress());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!UpdateEnergyLimitContract} returns this
 */
UpdateEnergyLimitContract.prototype.setContractAddress = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional int64 origin_energy_limit = 3;
 * @return {number}
 */
UpdateEnergyLimitContract.prototype.getOriginEnergyLimit = function () {
  return /** @type {number} */jspb.Message.getFieldWithDefault(this, 3, 0);
};

/**
 * @param {number} value
 * @return {!UpdateEnergyLimitContract} returns this
 */
UpdateEnergyLimitContract.prototype.setOriginEnergyLimit = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  SmartContractDataWrapper.prototype.toObject = function (opt_includeInstance) {
    return SmartContractDataWrapper.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!SmartContractDataWrapper} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  SmartContractDataWrapper.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        smartContract: (f = msg.getSmartContract()) && SmartContract.toObject(includeInstance, f),
        runtimecode: msg.getRuntimecode_asB64()
      };
    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!SmartContractDataWrapper}
 */
SmartContractDataWrapper.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new SmartContractDataWrapper();
  return SmartContractDataWrapper.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!SmartContractDataWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!SmartContractDataWrapper}
 */
SmartContractDataWrapper.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new SmartContract();
        reader.readMessage(value, SmartContract.deserializeBinaryFromReader);
        msg.setSmartContract(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */reader.readBytes();
        msg.setRuntimecode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
SmartContractDataWrapper.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  SmartContractDataWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!SmartContractDataWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
SmartContractDataWrapper.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSmartContract();
  if (f != null) {
    writer.writeMessage(1, f, SmartContract.serializeBinaryToWriter);
  }
  f = message.getRuntimecode_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * optional SmartContract smart_contract = 1;
 * @return {?SmartContract}
 */
SmartContractDataWrapper.prototype.getSmartContract = function () {
  return /** @type{?SmartContract} */(
    jspb.Message.getWrapperField(this, SmartContract, 1)
  );
};

/**
 * @param {?SmartContract|undefined} value
 * @return {!SmartContractDataWrapper} returns this
*/
SmartContractDataWrapper.prototype.setSmartContract = function (value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!SmartContractDataWrapper} returns this
 */
SmartContractDataWrapper.prototype.clearSmartContract = function () {
  return this.setSmartContract(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
SmartContractDataWrapper.prototype.hasSmartContract = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes runtimecode = 2;
 * @return {!(string|Uint8Array)}
 */
SmartContractDataWrapper.prototype.getRuntimecode = function () {
  return /** @type {!(string|Uint8Array)} */jspb.Message.getFieldWithDefault(this, 2, "");
};

/**
 * optional bytes runtimecode = 2;
 * This is a type-conversion wrapper around `getRuntimecode()`
 * @return {string}
 */
SmartContractDataWrapper.prototype.getRuntimecode_asB64 = function () {
  return /** @type {string} */jspb.Message.bytesAsB64(this.getRuntimecode());
};

/**
 * optional bytes runtimecode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRuntimecode()`
 * @return {!Uint8Array}
 */
SmartContractDataWrapper.prototype.getRuntimecode_asU8 = function () {
  return /** @type {!Uint8Array} */jspb.Message.bytesAsU8(this.getRuntimecode());
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!SmartContractDataWrapper} returns this
 */
SmartContractDataWrapper.prototype.setRuntimecode = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};
export { ClearABIContract, CreateSmartContract, SmartContract, SmartContractDataWrapper, TriggerSmartContract, UpdateEnergyLimitContract, UpdateSettingContract };
