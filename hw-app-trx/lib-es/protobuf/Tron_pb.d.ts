/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const AccountId: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!AccountId} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        name: any;
        address: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!AccountId}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!AccountId} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!AccountId}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!AccountId} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Vote: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Vote} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        voteAddress: any;
        voteCount: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Vote}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Vote} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Vote}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Vote} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Proposal: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */
    repeatedFields_: number[];
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Proposal} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        proposalId: any;
        proposerAddress: any;
        parametersMap: any;
        expirationTime: any;
        createTime: any;
        approvalsList: any;
        state: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Proposal}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Proposal} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Proposal}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Proposal} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
    /**
     * @enum {number}
     */
    State: {
        PENDING: number;
        DISAPPROVED: number;
        APPROVED: number;
        CANCELED: number;
    };
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Exchange: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Exchange} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        exchangeId: any;
        creatorAddress: any;
        createTime: any;
        firstTokenId: any;
        firstTokenBalance: any;
        secondTokenId: any;
        secondTokenBalance: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Exchange}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Exchange} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Exchange}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Exchange} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Account: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */
    Frozen(opt_data: any): void;
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */
    AccountResource(opt_data: any): void;
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */
    repeatedFields_: number[];
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Account} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        accountName: any;
        type: any;
        address: any;
        balance: any;
        votesList: any;
        assetMap: any;
        assetv2Map: any;
        frozenList: any;
        netUsage: any;
        acquiredDelegatedFrozenBalanceForBandwidth: any;
        delegatedFrozenBalanceForBandwidth: any;
        oldTronPower: any;
        tronPower: any;
        assetOptimized: any;
        createTime: any;
        latestOprationTime: any;
        allowance: any;
        latestWithdrawTime: any;
        code: any;
        isWitness: any;
        isCommittee: any;
        frozenSupplyList: any;
        assetIssuedName: any;
        assetIssuedId: any;
        latestAssetOperationTimeMap: any;
        latestAssetOperationTimev2Map: any;
        freeNetUsage: any;
        freeAssetNetUsageMap: any;
        freeAssetNetUsagev2Map: any;
        latestConsumeTime: any;
        latestConsumeFreeTime: any;
        accountId: any;
        accountResource: any;
        codehash: any;
        ownerPermission: any;
        witnessPermission: any;
        activePermissionList: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Account}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Account} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Account}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Account} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Key: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Key} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        address: any;
        weight: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Key}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Key} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Key}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Key} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const DelegatedResource: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!DelegatedResource} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        from: any;
        to: any;
        frozenBalanceForBandwidth: any;
        frozenBalanceForEnergy: any;
        expireTimeForBandwidth: any;
        expireTimeForEnergy: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!DelegatedResource}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!DelegatedResource} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!DelegatedResource}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!DelegatedResource} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const authority: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!authority} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        account: any;
        permissionName: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!authority}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!authority} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!authority}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!authority} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Permission: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */
    repeatedFields_: number[];
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Permission} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        type: any;
        id: any;
        permissionName: any;
        threshold: any;
        parentId: any;
        operations: any;
        keysList: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Permission}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Permission} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Permission}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Permission} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
    /**
     * @enum {number}
     */
    PermissionType: {
        OWNER: number;
        WITNESS: number;
        ACTIVE: number;
    };
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Witness: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Witness} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        address: any;
        votecount: any;
        pubkey: any;
        url: any;
        totalproduced: any;
        totalmissed: any;
        latestblocknum: any;
        latestslotnum: any;
        isjobs: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Witness}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Witness} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Witness}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Witness} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Votes: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */
    repeatedFields_: number[];
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Votes} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        address: any;
        oldVotesList: any;
        newVotesList: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Votes}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Votes} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Votes}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Votes} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const MarketOrderDetail: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!MarketOrderDetail} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        makerorderid: any;
        takerorderid: any;
        fillsellquantity: any;
        fillbuyquantity: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!MarketOrderDetail}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!MarketOrderDetail} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!MarketOrderDetail}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!MarketOrderDetail} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
declare const Transaction: {
    (opt_data: any): void;
    /**
     * @public
     * @override
     */
    displayName: string;
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */
    Contract(opt_data: any): void;
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */
    Result(opt_data: any): void;
    /**
     * Generated by JsPbCodeGenerator.
     * @param {Array=} opt_data Optional initial data array, typically from a
     * server response, or constructed directly in Javascript. The array is used
     * in place and becomes part of the constructed object. It is not cloned.
     * If no data is provided, the constructed object will be empty, but still
     * valid.
     * @extends {jspb.Message}
     * @constructor
     */
    raw(opt_data: any): void;
    /**
     * List of repeated fields within this message type.
     * @private {!Array<number>}
     * @const
     */
    repeatedFields_: number[];
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!Transaction} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    toObject(includeInstance: any, msg: any): {
        rawData: any;
        signatureList: any;
        retList: any;
    };
    /**
     * Deserializes binary data (in protobuf wire format).
     * @param {jspb.ByteSource} bytes The bytes to deserialize.
     * @return {!Transaction}
     */
    deserializeBinary(bytes: any): any;
    /**
     * Deserializes binary data (in protobuf wire format) from the
     * given reader into the given message object.
     * @param {!Transaction} msg The message object to deserialize into.
     * @param {!jspb.BinaryReader} reader The BinaryReader to use.
     * @return {!Transaction}
     */
    deserializeBinaryFromReader(msg: any, reader: any): any;
    /**
     * Serializes the given message to binary data (in protobuf wire
     * format), writing to the given BinaryWriter.
     * @param {!Transaction} message
     * @param {!jspb.BinaryWriter} writer
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    serializeBinaryToWriter(message: any, writer: any): void;
};
/**
 * @enum {number}
 */
declare const AccountType: {
    NORMAL: number;
    ASSETISSUE: number;
    CONTRACT: number;
};
export { Account, AccountId, AccountType, DelegatedResource, Exchange, Key, MarketOrderDetail, Permission, Proposal, Transaction, Vote, Votes, Witness, authority };
//# sourceMappingURL=Tron_pb.d.ts.map